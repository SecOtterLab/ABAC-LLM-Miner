
===============================================================
ITERATION : 2
===============================================================
rule(position [ {student} ]; type [ {gradebook} ]; readScore; crsTaught ] crs; )
rule(position [ {student} ]; type [ {gradebook} ]; readScore; crsTaken ] crs; )
rule(position [ {student} ]; type [ {gradebook} ]; addScore; crsTaught ] crs; )
rule(position [ {student} ]; type [ {gradebook} ]; readMyScores; crsTaken ] crs; )
rule(position [ {faculty} ]; type [ {gradebook} ]; {assignGrade, changeScore, readScore, addScore}; crsTaught ] crs; )
rule(position [ {staff} ], department [ {registrar} ]; type [ {roster} ]; {read, write}; )
rule(position [ {staff} ], department [ {registrar} ]; type [ {transcript} ]; {read}; )
rule(isChair [ {True} ]; type [ {transcript} ]; {read}; )
rule(position [ {staff} ], department [ {admissions} ]; type [ {application} ]; {setStatus, checkStatus, read}; )
rule(position [ {applicant} ]; type [ {application} ]; {checkStatus}; uid = student; )
rule(position [ {student} ]; type [ {transcript} }; {read}; uid = student; )

===============================================================
ITERATION : 1
===============================================================
rule(position [ {student} ]; type [ {gradebook} ]; readScore; crsTaken ] crs; )
rule(position [ {student} ]; type [ {gradebook} ]; readScore; crsTaught ] crs; )
rule(position [ {student} ]; type [ {gradebook} ]; addScore; crsTaught ] crs; )
rule(position [ {student} ]; type [ {gradebook} ]; readMyScores; crsTaken ] crs; )
rule(position [ {faculty} ]; type [ {gradebook} ]; assignGrade; crsTaught ] crs; )
rule(position [ {faculty} ]; type [ {gradebook} ]; changeScore; crsTaught ] crs; )
rule(position [ {faculty} ]; type [ {gradebook} ]; readScore; crsTaught ] crs; )
rule(position [ {faculty} ]; type [ {gradebook} ]; addScore; crsTaught ] crs; )
rule(position [ {faculty} ]; type [ {roster} ]; read; crsTaught ] crs; )
rule(position [ {staff} ]; type [ {roster} ]; read, write; )
rule(position [ {staff} ]; type [ {transcript} ]; read; )
rule(position [ {staff} ], department [ {admissions} ]; type [ {application} ]; setStatus, checkStatus, read; )
rule(position [ {student} ]; type [ {application} ]; checkStatus; uid = student; )
rule(position [ {student} ]; type [ {transcript} }; read; uid = student; )
rule(isChair [ {True} ]; type [ {transcript} ]; read; )

===============================================================
ITERATION : 0
===============================================================
rule(position [ {student} ]; type [ {gradebook} ]; readScore; )
rule(position [ {student} ], crsTaught ] crs; type [ {gradebook} ]; addScore; )
rule(position [ {student} ], crsTaken ] crs; type [ {gradebook} ]; readMyScores; )
rule(position [ {faculty} ], crsTaught ] crs; type [ {gradebook} ]; assignGrade, readScore, changeScore; )
rule(position [ {staff} ]; type [ {roster} ]; read, write; )
rule(position [ {staff} ]; type [ {transcript} ]; read; )
rule(position [ {staff} ], department [ {admissions} ]; type [ {application} ]; setStatus, checkStatus, read; )
rule(position [ {student} ]; type [ {application} ]; checkStatus; uid = student; )
rule(isChair [ {True} ]; departments > departments; type [ {transcript} ]; read; )
rule(position [ {student} ]; type [ {transcript} ]; read; uid = student; )
