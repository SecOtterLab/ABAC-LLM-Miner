
===============================================================
ITERATION : 2
===============================================================
rule(position [ {applicant}]; type [ {application}]; {checkStatus}; uid = student)
rule(position [ {student}]; type [ {application}]; {checkStatus}; uid = student)
rule(position [ {staff}], department [ {admissions}]; type [ {application}]; {read setStatus}; )
rule(position [ {faculty}]; type [ {gradebook}]; {assignGrade readScore changeScore addScore}; crsTaught ] crs)
rule(position [ {faculty}]; type [ {roster}]; {read}; crsTaught ] crs)
rule(position [ {student}]; type [ {gradebook}]; {readScore}; crsTaken ] crs)
rule(position [ {student}]; type [ {gradebook}]; {readScore addScore}; crsTaught ] crs)
rule(position [ {student}]; type [ {gradebook}]; {readMyScores}; crsTaken ] crs)
rule(position [ {staff}], department [ {registrar}]; type [ {transcript}]; {read}; )
rule(position [ {staff}], department [ {registrar}]; type [ {roster}]; {read write}; )
rule(isChair [ {True}]; type [ {transcript}]; {read}; department = departments)
rule(position [ {student}]; type [ {transcript}]; {read}; uid = student)

===============================================================
ITERATION : 1
===============================================================
rule(position [ {staff}], department [ {admissions}]; type [ {application}]; {read setStatus}; )
rule(position [ {applicant}]; type [ {application}]; {checkStatus}; uid = student)
rule(position [ {student}]; type [ {application}]; {checkStatus}; uid = student)
rule(position [ {faculty}]; type [ {gradebook}]; {assignGrade readScore changeScore addScore}; crsTaught ] crs)
rule(position [ {faculty}]; type [ {roster}]; {read}; crsTaught ] crs)
rule(position [ {student}]; type [ {gradebook}]; {readMyScores}; crsTaken ] crs)
rule(position [ {student}]; type [ {gradebook}]; {readMyScores}; crsTaught ] crs)
rule(position [ {student}]; type [ {gradebook}]; {readScore}; crsTaken ] crs)
rule(position [ {student}]; type [ {gradebook}]; {readScore addScore}; crsTaught ] crs)
rule(position [ {staff}], department [ {registrar}]; type [ {roster}]; {read write}; )
rule(position [ {staff}], department [ {registrar}]; type [ {transcript}]; {read}; )
rule(isChair [ {True}]; type [ {transcript}]; {read}; department = departments)
rule(position [ {student}]; type [ {transcript}]; {read}; uid = student)

===============================================================
ITERATION : 0
===============================================================
rule(position [ {staff}, department [ {admissions}]; type [ {application}]; {read setStatus}; )
rule(position [ {student applicant}]; type [ {application}]; {checkStatus}; uid = student)
rule(position [ {faculty}]; type [ {gradebook}]; {assignGrade readScore changeScore addScore}; crsTaught ] crs)
rule(position [ {student}]; type [ {gradebook}]; {readMyScores}; department = departments)
rule(position [ {student}]; type [ {gradebook}]; {readScore addScore}; crsTaught ] crs)
rule(position [ {staff}, department [ {registrar}]; type [ {roster}]; {read write}; )
rule(position [ {faculty}]; type [ {roster}]; {read}; crsTaught ] crs)
rule(position [ {student}]; type [ {transcript}]; {read}; uid = student)
rule(position [ {staff}, department [ {registrar}]; type [ {transcript}]; {read}; )
rule(isChair [ {True}]; type [ {transcript}]; {read}; department = departments)
