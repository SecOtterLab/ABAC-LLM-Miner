
===============================================================
ITERATION : 2
===============================================================
rule(position [ {applicant}, type [ {application}; {checkStatus}; student = applicant)
rule(position [ {student}, department [ {cs}, crsTaken ] cs101; type [ {gradebook}; {readMyScores}; crs = cs101)
rule(position [ {student}, department [ {cs}, crsTaken ] cs601; type [ {gradebook}; {readMyScores}; crs = cs601)
rule(position [ {student}, department [ {cs}, crsTaught ] cs602; type [ {gradebook}; {addScore, readScore}; crs = cs602)
rule(position [ {faculty}, department [ {cs}, isChair = True; type [ {transcript}; {read}; departments = cs)
rule(position [ {staff}, department [ {registrar}; type [ {roster, transcript}; {read, write}; departments = cs)
rule(position [ {student}, department [ {ee}, crsTaken ] ee101; type [ {gradebook}; {readMyScores}; crs = ee101)
rule(position [ {student}, department [ {ee}, crsTaken ] ee601; type [ {gradebook}; {readMyScores}; crs = ee601)
rule(position [ {student}, department [ {ee}, crsTaught ] ee602; type [ {gradebook}; {addScore, readScore}; crs = ee602)
rule(position [ {faculty}, department [ {ee}, isChair = True; type [ {transcript}; {read}; departments = ee)
rule(position [ {staff}, department [ {registrar}; type [ {roster, transcript}; {read, write}; departments = ee)
rule(position [ {student}, type [ {application}; {checkStatus}; student = position)
rule(position [ {applicant}, type [ {application}; {checkStatus}; student = applicant)
rule(position [ {staff}, department [ {admissions}; type [ {application}; {read, setStatus}; student = position)
rule(department [ {cs}, type [ {gradebook}; {assignGrade, changeScore}; crsTaught ] cs101)
rule(department [ {cs}, type [ {gradebook}; {assignGrade, changeScore}; crsTaught ] cs601)
rule(department [ {ee}, type [ {gradebook}; {assignGrade, changeScore}; crsTaught ] ee101)
rule(department [ {ee}, type [ {gradebook}; {assignGrade, changeScore}; crsTaught ] ee601)

===============================================================
ITERATION : 1
===============================================================
rule(position [ {applicant}, type [ {application}; {checkStatus}; student = applicant)
rule(position [ {student}, department [ {cs}, crsTaken ] cs101; type [ {gradebook}; {readMyScores}; crs = cs101)
rule(position [ {student}, department [ {cs}, crsTaken ] cs601; type [ {gradebook}; {readMyScores}; crs = cs601)
rule(position [ {student}, department [ {cs}, crsTaught ] cs602; type [ {gradebook}; {addScore, readScore}; crs = cs602)
rule(position [ {faculty}, department [ {cs}, isChair = True; type [ {transcript}; {read}; departments = cs)
rule(position [ {staff}, department [ {registrar}; type [ {roster, transcript}; {read, write}; departments = cs)
rule(position [ {student}, department [ {ee}, crsTaken ] ee101; type [ {gradebook}; {readMyScores}; crs = ee101)
rule(position [ {student}, department [ {ee}, crsTaken ] ee601; type [ {gradebook}; {readMyScores}; crs = ee601)
rule(position [ {student}, department [ {ee}, crsTaught ] ee602; type [ {gradebook}; {addScore, readScore}; crs = ee602)
rule(position [ {faculty}, department [ {ee}, isChair = True; type [ {transcript}; {read}; departments = ee)
rule(position [ {staff}, department [ {registrar}; type [ {roster, transcript}; {read, write}; departments = ee)
rule(position [ {student}, type [ {application}; {checkStatus}; student = position)
rule(position [ {applicant}, type [ {application}; {checkStatus}; student = applicant)
rule(position [ {staff}, department [ {admissions}; type [ {application}; {read, setStatus}; student = position)

===============================================================
ITERATION : 0
===============================================================
