
===============================================================
ITERATION : 2
===============================================================
rule(position [ {student}, department [ {cs} ; type [ {gradebook}, crs [ {cs602}, departments [ {cs} )
rule(position [ {applicant} ; type [ {application}, student [ {applicant1} )
rule(position [ {faculty}, department [ {cs}, crsTaught ] cs101; type [ {gradebook}, crs [ {cs101}, departments [ {cs} )
rule(position [ {staff}, department [ {registrar} ; type [ {roster}, departments [ {cs} )

===============================================================
ITERATION : 1
===============================================================

===============================================================
ITERATION : 0
===============================================================
rule(position [ {student}, department = cs, crsTaught ] cs602; type [ {gradebook}, crs = cs602; readScore)
rule(position [ {staff}, department = registrar; type [ {roster}, departments = cs; read)
rule(position [ {student}, department = ee, crsTaken = ee602; type [ {gradebook}, crs = ee602; readMyScores)
rule(position [ {student}, department = ee, crsTaught = ee601; type [ {gradebook}, crs = ee601; readScore)
rule(position [ {staff}, department = registrar; type [ {transcript}, student = eeStu5; read)
rule(position [ {faculty}, department = ee, crsTaught = ee601; type [ {gradebook}, crs = ee601; assignGrade)
rule(position [ {student}, department = ee, crsTaken = ee602; type [ {gradebook}, crs = ee602; addScore)
rule(position [ {student}, department = cs, uid = csStu4; type [ {transcript}, student = csStu4; read)
rule(position [ {student}, department = cs, crsTaught = cs601; type [ {gradebook}, crs = cs601; readScore)
rule(position [ {staff}, department = registrar; type [ {transcript}, student = eeStu3; read)
rule(position [ {chair}, department = ee; type [ {transcript}, student = eeStu4; read)
rule(position [ {staff}, department = registrar; type [ {roster}, crs = ee601; write)
rule(position [ {staff}, department = admissions; type [ {application}, student = eeStu2; setStatus)
rule(position [ {student}, department = cs, uid = csStu1; type [ {application}, student = csStu1; read)
rule(position [ {student}, department = cs, crsTaught = cs602; type [ {gradebook}, crs = cs602; addScore)
rule(position [ {student}, department = cs, crsTaken = cs601; type [ {gradebook}, crs = cs601; readMyScores)
rule(position [ {student}, department = ee, crsTaught = ee601; type [ {gradebook}, crs = ee602; addScore)
rule(position [ {student}, department = ee, crsTaken = ee101; type [ {application}, student = eeStu1; checkStatus)
rule(position [ {chair}, department = cs; type [ {transcript}, student = csStu2; read)
rule(position [ {student}, department = ee, crsTaught = ee602; type [ {gradebook}, crs = ee601; readMyScores)
rule(position [ {chair}, department = ee; type [ {transcript}, student = eeStu5; read)
rule(position [ {staff}, department = registrar; type [ {roster}, crs = cs101; read)
rule(position [ {student}, department = cs, uid = csStu4; type [ {application}, student = csStu4; checkStatus)
rule(position [ {student}, department = ee, crsTaken = ee601; type [ {gradebook}, crs = ee601; readMyScores)
rule(position [ {student}, department = ee, crsTaught = ee602; type [ {gradebook}, crs = ee602; readScore)
rule(position [ {student}, department = cs, uid = csStu5; type [ {application}, student = csStu5; checkStatus)
rule(position [ {staff}, department = admissions; type [ {application}, student = csStu2; read)
rule(position [ {chair}, department = ee; type [ {transcript}, student = eeStu3; read)
rule(position [ {student}, department = cs, crsTaught = cs601; type [ {gradebook}, crs = cs601; addScore)
rule(position [ {student}, department = ee, crsTaken = ee602; type [ {gradebook}, crs = ee602; readMyScores)
rule(position [ {chair}, department = cs; type [ {transcript}, student = csStu3; read)
rule(position [ {student}, department = ee, crsTaught = ee601; type [ {gradebook}, crs = ee601; addScore)
rule(position [ {student}, department = cs, uid = csStu1; type [ {application}, student = csStu1; checkStatus)
rule(position [ {chair}, department = ee; type [ {transcript}, student = eeStu2; read)
rule(position [ {student}, department = ee, crsTaught = ee602; type [ {gradebook}, crs = ee601; addScore)
rule(position [ {student}, department = cs, uid = csStu5; type [ {transcript}, student = csStu5; read)
rule(position [ {chair}, department = cs; type [ {transcript}, student = csStu4; read)
rule(position [ {student}, department = ee, crsTaken = ee601; type [ {gradebook}, crs = ee601; readMyScores)
rule(position [ {student}, department = cs, uid = csStu2; type [ {application}, student = csStu2; checkStatus)
rule(position [ {chair}, department = cs; type [ {transcript}, student = csStu5; read)
rule(position [ {student}, department = ee, crsTaken = ee602; type [ {gradebook}, crs = ee602; addScore)
rule(position [ {student}, department = cs, crsTaught = cs601; type [ {gradebook}, crs = cs601; readMyScores)
rule(position [ {chair}, department = cs; type [ {transcript}, student = csStu1; read)
rule(position [ {student}, department = ee, crsTaken = ee602; type [ {application}, student = eeStu4; checkStatus)
rule(position [ {student}, department = cs, uid = csStu5; type [ {transcript}, student = csStu5; read)
rule(position [ {chair}, department = ee; type [ {transcript}, student = eeStu3; read)
