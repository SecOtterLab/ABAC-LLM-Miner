
===============================================================
ITERATION : 2
===============================================================
rule(position [ {applicant}; type [ {application}; actions={checkStatus})
rule(position [ {student}, department [ {cs}; crsTaken ] cs101, type [ {gradebook}, crs = cs101, departments [ {cs}; actions={readMyScores})
rule(position [ {faculty}, department [ {cs}, isChair = true, type [ {transcript}, student [ {csStu1, csStu2, csStu3, csStu4, csStu5}, departments [ {cs}; actions={read})
rule(position [ {staff}, department [ {registrar}; type [ {roster}, crs [ {cs101, cs601, cs602}, departments [ {cs}; actions={read, write})
rule(position [ {student}, department [ {ee}; crsTaken ] ee602, type [ {gradebook}, crs = ee602, departments [ {ee}; actions={readMyScores})
rule(position [ {registrar}, type [ {transcript}, student [ {csStu1, csStu2, csStu3, csStu4, csStu5}, departments [ {cs}; actions={read})
rule(position [ {faculty}, department [ {ee}; crsTaught ] ee601, type [ {gradebook}, crs = ee601, departments [ {ee}; actions={assignGrade})
rule(position [ {student}, department [ {ee}; crsTaken ] ee602, type [ {gradebook}, crs = ee602, departments [ {ee}; actions={addScore})
rule(position [ {student}, department [ {cs}; type [ {transcript}, student [ {csStu1, csStu2, csStu3, csStu4, csStu5}; actions={read})
rule(position [ {student}, department [ {cs}; crsTaken ] cs601, type [ {gradebook}, crs = cs601, departments [ {cs}; actions={readScore})
rule(position [ {registrar}, type [ {transcript}, student [ {eeStu1, eeStu2, eeStu3, eeStu4, eeStu5}, departments [ {ee}; actions={read})
rule(position [ {chair}, department [ {ee}; type [ {transcript}, student [ {eeStu1, eeStu2, eeStu3, eeStu4, eeStu5}; actions={read})
rule(position [ {registrar}, type [ {roster}, crs [ {ee101, ee601, ee602}, departments [ {ee}; actions={write})
rule(position [ {staff}, department [ {admissions}; type [ {application}, student [ {csStu1, csStu2, csStu3, csStu4, csStu5, eeStu1, eeStu2, eeStu3, eeStu4, eeStu5}; actions={setStatus})
rule(position [ {student}, department [ {cs}; type [ {application}, student [ {csStu1, csStu2, csStu3, csStu4, csStu5}; actions={read})
rule(position [ {student}, department [ {cs}; crsTaken ] cs601, type [ {gradebook}, crs = cs601, departments [ {cs}; actions={addScore})
rule(position [ {registrar}, type [ {roster}, crs [ {ee101, ee601, ee602}, departments [ {ee}; actions={write})
rule(position [ {student}, department [ {ee}; crsTaken ] ee601, type [ {gradebook}, crs = ee601, departments [ {ee}; actions={readMyScores})

===============================================================
ITERATION : 1
===============================================================
rule(position [ {applicant}; type [ {application}, student = applicant1; actions={checkStatus})
rule(position [ {student}, department [ {cs}, crsTaken ] cs101, type [ {gradebook}, crs = cs101, departments [ {cs}; actions={readMyScores})
rule(position [ {faculty}, department [ {cs}, isChair = true, type [ {transcript}, student = csStu1, departments [ {cs}; actions={read})
rule(position [ {staff}, department [ {registrar}, type [ {roster}, crs = cs101, departments [ {cs}; actions={read})
rule(position [ {student}, department [ {ee}, crsTaken ] ee602, type [ {gradebook}, crs = ee602, departments [ {ee}; actions={readMyScores})
rule(position [ {registrar}, type [ {transcript}, student = eeStu5, departments [ {ee}; actions={read})
rule(position [ {faculty}, department [ {ee}, crsTaught ] ee601, type [ {gradebook}, crs = ee601, departments [ {ee}; actions={assignGrade})
rule(position [ {student}, department [ {ee}, crsTaken ] ee602, type [ {gradebook}, crs = ee602, departments [ {ee}; actions={addScore})
rule(position [ {student}, department [ {cs}, type [ {transcript}, student = csStu4; actions={read})
rule(position [ {student}, department [ {cs}, crsTaken ] cs601, type [ {gradebook}, crs = cs601, departments [ {cs}; actions={readScore})
rule(position [ {registrar}, type [ {transcript}, student = eeStu3, departments [ {ee}; actions={read})
rule(position [ {chair}, department [ {ee}, type [ {transcript}, student = eeStu4; actions={read})
rule(position [ {registrar}, type [ {roster}, crs = ee601, departments [ {ee}; actions={write})
rule(position [ {staff}, department [ {admissions}, type [ {application}, student = eeStu2; actions={setStatus})
rule(position [ {student}, department [ {cs}, type [ {application}, student = csStu1; actions={read})
rule(position [ {student}, department [ {cs}, crsTaken ] cs601, type [ {gradebook}, crs = cs601, departments [ {cs}; actions={addScore})
rule(position [ {registrar}, type [ {roster}, crs = cs602, departments [ {cs}; actions={read})
rule(position [ {student}, department [ {ee}, crsTaken ] ee601, type [ {gradebook}, crs = ee601, departments [ {ee}; actions={readMyScores})
rule(position [ {registrar}, type [ {roster}, crs = ee101, departments [ {ee}; actions={write})
rule(position [ {student}, department [ {cs}, crsTaken ] cs602, type [ {gradebook}, crs = cs602, departments [ {cs}; actions={readScore})
rule(position [ {registrar}, type [ {transcript}, student = eeStu2, departments [ {ee}; actions={read})
rule(position [ {student}, department [ {cs}, type [ {application}, student = csStu5; actions={checkStatus})
rule(position [ {registrar}, type [ {roster}, crs = cs101, departments [ {cs}; actions={write})
rule(position [ {student}, department [ {ee}, crsTaken ] ee601, type [ {gradebook}, crs = ee601, departments [ {ee}; actions={addScore})
rule(position [ {registrar}, type [ {roster}, crs = cs602, departments [ {cs}; actions={write})
rule(position [ {student}, department [ {ee}, crsTaken ] ee602, type [ {gradebook}, crs = ee602, departments [ {ee}; actions={readScore})

===============================================================
ITERATION : 0
===============================================================
rule(position [ {applicant}; type [ {application}, student = applicant1; actions={checkStatus})
rule(position [ {student}, department [ {cs}, crsTaken ] cs101, type [ {gradebook}, crs = cs101, departments [ {cs}; actions={readMyScores})
rule(position [ {faculty}, department [ {cs}, isChair = true, type [ {transcript}, student = csStu1, departments [ {cs}; actions={read})
rule(position [ {staff}, department [ {registrar}, type [ {roster}, crs = cs101, departments [ {cs}; actions={read})
rule(position [ {student}, department [ {ee}, crsTaken ] ee602, type [ {gradebook}, crs = ee602, departments [ {ee}; actions={readMyScores})
rule(position [ {registrar}, type [ {transcript}, student = eeStu5, departments [ {ee}; actions={read})
rule(position [ {faculty}, department [ {ee}, crsTaught ] ee601, type [ {gradebook}, crs = ee601, departments [ {ee}; actions={assignGrade})
rule(position [ {student}, department [ {ee}, crsTaken ] ee602, type [ {gradebook}, crs = ee602, departments [ {ee}; actions={addScore})
rule(position [ {student}, department [ {cs}, type [ {transcript}, student = csStu4; actions={read})
rule(position [ {student}, department [ {cs}, crsTaken ] cs601, type [ {gradebook}, crs = cs601, departments [ {cs}; actions={readScore})
rule(position [ {registrar}, type [ {transcript}, student = eeStu3, departments [ {ee}; actions={read})
rule(position [ {chair}, department [ {ee}, type [ {transcript}, student = eeStu4; actions={read})
rule(position [ {registrar}, type [ {roster}, crs = ee601, departments [ {ee}; actions={write})
rule(position [ {staff}, department [ {admissions}, type [ {application}, student = eeStu2; actions={setStatus})
rule(position [ {student}, department [ {cs}, type [ {application}, student = csStu1; actions={read})
rule(position [ {student}, department [ {cs}, crsTaken ] cs601, type [ {gradebook}, crs = cs601, departments [ {cs}; actions={addScore})
rule(position [ {registrar}, type [ {roster}, crs = cs602, departments [ {cs}; actions={read})
rule(position [ {student}, department [ {ee}, crsTaken ] ee601, type [ {gradebook}, crs = ee601, departments [ {ee}; actions={readMyScores})
rule(position [ {registrar}, type [ {roster}, crs = ee101, departments [ {ee}; actions={write})
rule(position [ {student}, department [ {cs}, crsTaken ] cs602, type [ {gradebook}, crs = cs602, departments [ {cs}; actions={readScore})
rule(position [ {registrar}, type [ {transcript}, student = eeStu2, departments [ {ee}; actions={read})
rule(position [ {student}, department [ {cs}, type [ {application}, student = csStu5; actions={checkStatus})
rule(position [ {registrar}, type [ {roster}, crs = cs101, departments [ {cs}; actions={write})
rule(position [ {student}, department [ {ee}, crsTaken ] ee601, type [ {gradebook}, crs = ee601, departments [ {ee}; actions={addScore})
rule(position [ {registrar}, type [ {roster}, crs = cs602, departments [ {cs}; actions={write})
rule(position [ {student}, department [ {ee}, crsTaken ] ee602, type [ {gradebook}, crs = ee602, departments [ {ee}; actions={readScore})
