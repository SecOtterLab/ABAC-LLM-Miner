
===============================================================
ITERATION : 2
===============================================================
rule(; type [ {schedule}; {read}; projects ] project)
rule(; type [ {budget schedule}; {read write}; projectsLed ] project)
rule(; type [ {task}; {setStatus}; tasks ] rid)
rule(isEmployee [ {True}; type [ {task}, proprietary [ {True}; {read request}; projects ] project, expertise > expertise)
rule(; type [ {task}, proprietary [ {False}; {read request}; projects ] project, expertise > expertise)

===============================================================
ITERATION : 1
===============================================================
rule(; type [ {schedule}; {read}; projects ] project)
rule(; type [ {budget schedule}; {read write}; projectsLed ] project)
rule(; type [ {task}; {setStatus}; projects ] project, expertise > expertise, tasks ] rid)
rule(isEmployee [ {True}; type [ {task}, proprietary [ {True}; {read request}; projects ] project, expertise > expertise)
rule(; type [ {task}, proprietary [ {False}; {request}; projects ] project, expertise > expertise)
rule(; type [ {task}, proprietary [ {False}; {read}; projects ] project, expertise > expertise)

===============================================================
ITERATION : 0
===============================================================
rule(; type [ {schedule}; {read}; projects ] project)
rule(; type [ {budget schedule}; {read write}; projectsLed ] project)
rule(; type [ {task}; {setStatus}; projects ] project, expertise > expertise, tasks ] rid)
rule(; type [ {task}, proprietary [ {False}; {read request}; projects ] project, expertise > expertise, tasks ] rid)
rule(isEmployee [ {True}; type [ {task}, proprietary [ {True}; {read request}; projects ] project, expertise > expertise)
rule(; type [ {task}, proprietary [ {False}; {request}; projects ] project, expertise > expertise)
rule(isEmployee [ {True}; type [ {task}, proprietary [ {False}; {read}; projects ] project, expertise > expertise)
rule(expertise ] coding; type [ {task}, proprietary [ {False}; {read}; projects ] project, expertise > expertise)
rule(; type [ {task}, proprietary [ {False}, department [ {dept2}; {read}; projects ] project, expertise > expertise)
