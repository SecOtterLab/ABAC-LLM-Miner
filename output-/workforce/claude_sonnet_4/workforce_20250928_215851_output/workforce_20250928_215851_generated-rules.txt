
===============================================================
ITERATION : 2
===============================================================

===============================================================
ITERATION : 1
===============================================================

===============================================================
ITERATION : 0
===============================================================
rule(position [ {workforceManager}; type [ {task}; {view}; assignedTechnician ] managedStaff)
rule(position [ {technician}; type [ {task}; {view}; assignedTechnician = uid)
rule(position [ {workforceManager}; type [ {task}; {complete}; assignedTechnician ] managedStaff)
rule(position [ {technician}; type [ {task}; {complete}; assignedTechnician = uid)
rule(position [ {helpdeskOperator}, department [ {helpdesk}; type [ {workOrder}; {modify}; createdBy = uid)
rule(position [ {helpdeskOperator}, department [ {helpdesk}; type [ {workOrder}; {delete}; createdBy = uid)
rule(position [ {helpdeskOperator}, department [ {helpdesk}, provider [ {eWorkforce}; type [ {contract}, contractStatus [ {active}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)
rule(position [ {helpdeskOperator}, department [ {helpdesk}, provider [ {eWorkforce}; type [ {contract}, contractStatus [ {inactive}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)
rule(position [ {helpdeskOperator}, department [ {helpdesk}, provider [ {externalHelpdeskSupplier}; type [ {contract}, contractStatus [ {active}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)
rule(position [ {helpdeskOperator}, department [ {helpdesk}, provider [ {externalHelpdeskSupplier}; type [ {contract}, contractStatus [ {inactive}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)
rule(position [ {salesManager}, department [ {sales}; type [ {workOrder}; {view}; tenant = assignedTenant)
rule(position [ {maintenanceManager}, department [ {maintenance}; type [ {contract}; {createOneTimeWorkOrder createRecurrentWorkOrder}; tenant = assignedTenant)
rule(position [ {warehouseOperator}, department [ {warehouse}; type [ {resourceRequest}; {view}; assignedEmployee = uid)
rule(position [ {warehouseOperator}, department [ {warehouse}; type [ {resourceRequest}; {complete}; assignedEmployee = uid)
rule(position [ {warehouseManager}, department [ {warehouse}; type [ {resourceRequest}; {view}; assignedEmployee ] managedStaff)
rule(position [ {warehouseManager}, department [ {warehouse}; type [ {resourceRequest}; {complete}; assignedEmployee ] managedStaff)
rule(position [ {warehouseManager}, department [ {warehouse}; type [ {stockRefillRequest}; {markComplete}; assignedEmployee ] managedStaff)
rule(position [ {salesManager}, department [ {sales}; type [ {stockRefillRequest}; {receive}; tenant = assignedTenant)
rule(position [ {helpdeskManager}, department [ {helpdesk}; type [ {workOrder}; {view}; tenant = assignedTenant)
rule(position [ {applicationAdmin}; type [ {workOrder}; {delete modify}; )
rule(position [ {applicationAdmin}; type [ {contract}; {createAppointment}; )