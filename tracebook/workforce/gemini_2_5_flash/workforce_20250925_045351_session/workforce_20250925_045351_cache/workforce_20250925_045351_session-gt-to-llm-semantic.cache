
===============================================================
ITERATION : 0
===============================================================
rule(position [ {helpdeskOperator}; type [ {workOrder}; {}; department = workforce, createdBy = uid, tenant = tenant) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {technician}; type [ {task}; {}; assignedTechnician = uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {workforceManager}, department [ {workforce}; type [ {task}; {}; assignedTenant = tenant, resourceRegion = assignedRegion, assignedEmployee = uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {workforceManager}, department [ {workforce}; type [ {task}; {}; resourceRegion = assignedRegion, assignedEmployee = uid, tenant = assignedTenant) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {workforceManager}; type [ {task}; {}; tenant = assignedTenant, department = workforce) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {workforceManager}; type [ {task}; {}; assignedEmployee = uid, provider = provider, department = workforce) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {technician}; type [ {task}; {}; requiredCertifications ] certifications, assignedTechnician = uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {technician}, department [ {workforce}; type [ {task}; {}; assignedEmployee = uid, tenant = tenant) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {technician}; type [ {task}; {}; assignedEmployee = uid, certifications ] requiredCertifications) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {technician}, department [ {workforce}; type [ {task}; {}; requiredCertifications ] certifications) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {workforceManager}; type [ {task}; {}; requiredCertifications ] certifications, assignedEmployee = uid, provider = provider, department = workforce) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {workforceManager}; type [ {task}; {}; tenant = assignedTenant) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {workforceManager}; type [ {task}; {}; requiredCertifications ] certifications) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(department [ {helpdesk}; type [ {contract}; {createRecurrentWorkOrder, createOneTimeWorkOrder}, tenantType [ {primary}; assignedTenant = tenant) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(department [ {maintenance}; type [ {contract}; {createRecurrentWorkOrder, createOneTimeWorkOrder}, tenantType [ {primary}; assignedTenant = tenant) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {salesManager}; type [ {workOrder}; {}; tenant = assignedTenant, resourceRegion = assignedRegion, department = workforce) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(department [ {warehouse}; type [ {stockRefillRequest}, department [ {warehouse}; {markComplete}; assignedEmployee = uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(department [ {warehouse}; type [ {resourceRequest}, department [ {warehouse}; {complete}; assignedEmployee = uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {technician}, certifications ] {telcoCertifiedTechnician}; type [ {workOrder}; {}; requiredCertifications ] {telcoCertifiedTechnician}, assignedTechnician = uid, tenant = telco) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {helpdeskOperator}; type [ {workOrder}; {modify, delete}; createdBy = uid, tenant = telco) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(provider [ {eWorkforce}, department [ {helpdesk}; type [ {workOrder}; {modify, delete}; createdBy = uid, tenant = telco) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(provider [ {externalHelpdeskSupplier}, department [ {helpdesk}; type [ {workOrder}; {modify, delete}; createdBy = uid, tenant = telco) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {helpdeskOperator}; type [ {workOrder}; {modify, delete}; createdBy = uid, tenant = powerProtection) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(provider [ {eWorkforce}, department [ {helpdesk}; type [ {workOrder}; {modify, delete}; createdBy = uid, tenant = powerProtection) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(provider [ {externalHelpdeskSupplier}, department [ {helpdesk}; type [ {workOrder}; {modify, delete}; createdBy = uid, tenant = powerProtection) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {technician}, certifications ] {powerProtectionSpecialist}; type [ {workOrder}; {}; requiredCertifications ] {powerProtectionSpecialist}, assignedTechnician = uid, tenant = powerProtection) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {technician}, provider [ {eWorkforce, subcontractor, externalWorkforceSupplier}; type [ {workOrder}; {}; assignedTechnician = uid, assignedTenant = tenant) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {technician}, department [ {workforce}; type [ {workOrder}; {}; requiredCertifications ] certifications, assignedTechnician = uid, tenant = tenant, tenantType [ {primary}; assignedRegion = resourceRegion) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {workforceManager}; type [ {task}; {}; assignedEmployee = uid, department = workforce, assignedRegion = resourceRegion, tenant = tenant) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {workforceManager}, department [ {workforce}; type [ {task}; {}; tenant = assignedTenant, resourceRegion = resourceRegion, managedStaff ] uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {workforceManager}; type [ {workOrder}; {view}; tenant = assignedTenant, department = workforce, assignedRegion = resourceRegion, contractStatus [ {active, inactive}) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {workforceManager}; type [ {task}; {view}; tenant = assignedTenant, resourceRegion = resourceRegion, department = workforce, assignedEmployee = uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {technician}, certifications ] {powerProtectionSpecialist}; type [ {task}; {}; requiredCertifications ] {powerProtectionSpecialist}, assignedTechnician = uid, tenant = powerProtection) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {technician}; type [ {task}; {}; assignedEmployee = uid, certifications ] requiredCertifications, assignedTechnician = uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {technician}; type [ {task}; {}; certifications ] requiredCertifications, assignedEmployee = uid, tenant = tenant) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {technician}, department [ {workforce}; type [ {task}; {}; certifications ] requiredCertifications, assignedTechnician = uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {technician}, certifications ] {telcoCertifiedTechnician, powerProtectionSpecialist}; type [ {task}; {}; requiredCertifications ] {telcoCertifiedTechnician, powerProtectionSpecialist}, assignedTechnician = uid, tenant = tenant) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(department [ {warehouseManager}, department [ {warehouse}; type [ {stockRefillRequest}; {markComplete}; department = warehouse, tenant = tenant) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(provider [ {eWorkforce}, department [ {warehouse}; type [ {stockRefillRequest}; {markComplete}; department = warehouse, assignedEmployee = uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(provider [ {externalWarehouseSupplier}, department [ {warehouse}; type [ {stockRefillRequest}; {markComplete}; assignedEmployee = uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(provider [ {subcontractor}, department [ {warehouse}; type [ {stockRefillRequest}; {markComplete}; assignedEmployee = uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(department [ {warehouseManager}, department [ {warehouse}; type [ {resourceRequest}; {complete}; department = warehouse, tenant = tenant) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(department [ {warehouseOperator}, department [ {warehouse}; type [ {resourceRequest}; {complete}; department = warehouse, assignedEmployee = uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(provider [ {eWorkforce}, department [ {warehouse}; type [ {resourceRequest}; {complete}; department = warehouse, assignedEmployee = uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(provider [ {externalWarehouseSupplier}, department [ {warehouse}; type [ {resourceRequest}; {complete}; department = warehouse, assignedEmployee = uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(provider [ {subcontractor}, department [ {warehouse}; type [ {resourceRequest}; {complete}; department = warehouse, assignedEmployee = uid) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {applicationAdmin}; type [ {contract}; {createAppointment}; assignedTenant = tenant) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
rule(position [ {technician}, department [ {workforce}; type [ {workOrder}; {view}; assignedEmployee = uid, department = workforce, tenant = tenant) : ('rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)', 0.0)
