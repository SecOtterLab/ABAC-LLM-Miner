rule(position [ {helpdeskOperator}; type [ {workOrder}; {modify}])
rule(position [ {technician}, assignedTenant = tenant; type [ {task}, assignedTechnician = uid; {view}])
rule(position [ {workforceManager}, managedStaff ] uid; type [ {task}; {view}])
rule(position [ {helpdeskOperator}; type [ {contract}; {createRecurrentWorkOrder}])
rule(position [ {salesManager}, assignedTenant = tenant; type [ {workOrder}; {view}])
rule(position [ {maintenanceManager}, assignedTenant = tenant; type [ {contract}; {createRecurrentWorkOrder}])
rule(assignedTenant = tenant, position [ {workforceManager}; type [ {task}; {complete}])
rule(position [ {technician}, certifications ] requiredCertifications; type [ {task}; {view}])
rule(position [ {technician}, certifications ] requiredCertifications; type [ {workOrder}; {view}])
rule(position [ {workforceManager}, managedStaff ] assignedTechnician; type [ {task}; {view}])
rule(position [ {workforceManager}; type [ {task}; {complete}])
rule(position [ {helpdeskOperator}; type [ {workOrder}; {delete}])
rule(department [ {warehouse}; position [ {warehouseManager}; type [ {stockRefillRequest}; {markComplete}])
rule(position [ {technician}; type [ {resourceRequest}, assignedTechnician = uid; {view}])
rule(position [ {helpdeskOperator}, provider [ {externalHelpdeskSupplier}; type [ {contract}; {createOneTimeWorkOrder}])
rule(assignedTenant = tenant; type [ {resourceRequest}; {complete}])
rule(position [ {workforceManager}, assignedTenant = tenant; type [ {task}; {view}])
rule(assignedTenant = tenant, position [ {workforceManager}; type [ {resourceRequest}; {view}])
rule(assignedTenant = tenant, position [ {salesManager}; type [ {contract}; {createRecurrentWorkOrder}])
rule(department [ {maintenance}; position [ {maintenanceManager}; type [ {contract}; {createRecurrentWorkOrder}])
rule(assignedEmployee = uid; type [ {resourceRequest}; {view}])
rule(assignedEmployee = uid; type [ {stockRefillRequest}; {markComplete}])
rule(type [ {task},assignedTechnician = uid]; provider [ {externalWorkforceSupplier}; assignedTenant = tenant; resourceRegion = resourceRegion; contractStatus = contractStatus; requiredCertifications ] certifications; {view}])
rule(type [ {contract}; position [ {applicationAdmin}; {createAppointment}])
rule(department [ {warehouse}, assignedTenant = tenant; type [ {resourceRequest}; {view}])
rule(position [ {workforceManager}, assignedTenant = tenant; type [ {task}, assignedTechnician = uid; {view}])
rule(assignedTenant = tenant; assignedRegion = resourceRegion; contractStatus = contractStatus; department = department; type [ {contract}; assignedTenant = tenant; assignedRegion = resourceRegion; createdBy = uid; assignedEmployee = uid; assignedTechnician = uid; requiredCertifications ] certifications; {markComplete,receive}])
rule(position [ {helpdeskOperator}; assignedTenant = tenant; resourceRegion = resourceRegion; type [ {contract}, workOrder]; tenantType = tenantType; contractStatus = contractStatus; associatedContract = associatedContract; associatedWorkOrder = associatedWorkOrder; createdBy = uid; requiredCertifications ] certifications; {view,modify,delete}])
rule(department [ {maintenance}; provider [ {powerProtection,telco}; tenant = tenant]; group [ {companySupport,residentialSupport}; group ] residentialSupport; type [ {contract}; tenant = tenantType; associatedWorkOrder = associatedWorkOrder; requiredCertifications ] certifications; assignedTenant = tenant; {createOneTimeWorkOrder, createRecurrentWorkOrder, delete}])
rule(type [ {resourceRequest,stockRefillRequest}; department ] warehouse; tenant = tenant; tenantType = tenantType; resourceRegion = resourceRegion; contractStatus = contractStatus; assignedEmployee = uid; assignedTechnician = uid; requiredCertifications ] certifications; assignedTenant = tenant; {markComplete,receive,view,delete,complete}])
rule(provider [ {eWorkforce,telco,powerProtection}; assignedRegion = resourceRegion]; tenant = tenant; tenantType = tenantType; resourceRegion = resourceRegion; contractStatus = contractStatus; requiredCertifications ] certifications; isCustomerSupport = True; assignedTechnician = uid; type [ {task,workOrder}; {view,complete,delete,modify}])
rule(provider [ {subcontractor,externalWorkforceSupplier,externalWarehouseSupplier,externalHelpdeskSupplier}; assignedTenant = tenant; assignedRegion = resourceRegion; managedStaff ] assignedTechnician; assignedTenant = tenantType; resourceRegion = resourceRegion; contractStatus = contractStatus; certifications ] requiredCertifications; type [ {task,workOrder}; {view,complete,delete,modify}])
rule(position [ {technician}; assignedTenant = tenant; resourceRegion = resourceRegion; certifications ] requiredCertifications; group [ {techSupport,residentialSupport,companySupport}; assignedEmployee = uid]; type [ {resourceRequest,stockRefillRequest}; tenant = tenantType; resourceRegion = resourceRegion; contractStatus = contractStatus; associatedWorkOrder = associatedWorkOrder; assignedTechnician = uid; assignedTenant = tenant; assignedRegion = resourceRegion; managedStaff ] assignedTechnician; {view,markComplete,delete,modify,receive,complete}])
rule(assignedTenant = tenant; type [ {contract}; assignedRegion = resourceRegion; associatedWorkOrder = associatedWorkOrder; tenantType = tenantType; assignedEmployee = uid; requiredCertifications ] certifications; position [ {technician,workforceManager}; certifications ] requiredCertifications; isCustomerSupport = True; contractStatus = contractStatus; department = department; provider [ {powerProtection,telco}; tenant = tenant]; group [ {companySupport,residentialSupport,provisioning}; {createOneTimeWorkOrder, createRecurrentWorkOrder, delete,view,complete,markComplete,receive,modify}])
rule(position [ {helpdeskOperator,salesManager,maintenanceManager}; provider [ {eWorkforce,externalHelpdeskSupplier,externalWorkforceSupplier,subcontractor}; department ] helpdesk; managedStaff ] uid; isCustomerSupport = False; assignedRegion = resourceRegion; managedStaff ] assignedTechnician; assignedTenant = tenantType; resourceRegion = resourceRegion; requiredCertifications ] certifications; provider [ {eWorkforce,externalWorkforceSupplier,telco,powerProtection,subcontractor}; assignedTenant = tenant]; type [ {contract,workOrder}; certifications ] requiredCertifications; assignedEmployee = uid; {view,markComplete,delete,createOneTimeWorkOrder, createRecurrentWorkOrder, modify,complete, receive}])