rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read}; ])
rule(position [ {csChair}; departments ] departments, student = student, type [ {transcript}; {read}; ])
rule(position [ {student}; uid = student, type [ {transcript}; {read}; ])
rule(position [ {registrar}; crs = crs, departments ] departments, type [ {roster}; {write}; ])
rule(position [ {csFac1}; crs = crs, departments ] departments, type [ {roster}; {read}; ])
rule(position [ {csFac1}; crs = crs, departments ] departments, type [ {gradebook}; {readScore addScore assignGrade changeScore}; ])
rule(position [ {student}; crsTaken ] crs, departments ] departments, type [ {gradebook}; {readScore}; ])
rule(position [ {student}; crsTaken ] crs, departments ] departments, type [ {gradebook}; {readMyScores}; ])
rule(position [ {staff}; type [ {application}; department = admissions; {setStatus read}; ])
rule(position [ {applicant}; uid = student, type [ {application}; {checkStatus}; ])
rule(position [ {student}; uid = student, type [ {application}; {checkStatus}; ])
rule(position [ {eeFac1}; crs = crs, departments ] departments, type [ {gradebook}; {assignGrade addScore changeScore readScore}; ])
rule(position [ {eeFac2}; crs = crs, departments ] departments, type [ {gradebook}; {readScore addScore assignGrade changeScore}; ])
rule(position [ {eeFac1}; crs = crs, departments ] departments, type [ {roster}; {read}; ])
rule(position [ {eeFac2}; crs = crs, departments ] departments, type [ {roster}; {read}; ])
rule(position [ {student}; uid = student, type [ {transcript}; {read}; department=ee]; )
rule(position [ {student}; uid = student, type [ {transcript}; {read}; department=cs]; )
rule(position [ {staff}; type [ {roster}; department=cs]; {read write}; ])
rule(position [ {staff}; type [ {roster}; department=ee]; {read write}; ])
rule(position [ {staff}; student = student, type [ {transcript}; department=cs]; {read}; ])
rule(position [ {staff}; student = student, type [ {transcript}; department=ee]; {read}; ])
rule(position [ {staff}; type [ {application}; student=applicant1]; {setStatus read}; ])
rule(position [ {staff}; type [ {application}; student=applicant2]; {setStatus read}; ])
