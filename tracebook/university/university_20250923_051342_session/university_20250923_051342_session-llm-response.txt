rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read};)
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; {read};)
rule(position [ {eeChair}; student = student, departments [ {ee}, type [ {transcript}; {read};)
rule(position [ {staff}, department [ {registrar}; crs = crs, departments ] departments, type [ {roster}; {write};)
rule(position [ {faculty}, department [ {cs}; crs = crs, departments [ {cs}, type [ {roster}; {read};)
rule(position [ {student}, department [ {cs}; departments [ {cs}, type [ {transcript}; {read}; uid = student)
rule(position [ {student}, department [ {ee}; departments [ {ee}, type [ {transcript}; {read}; uid = student)
rule(position [ {applicant}; student = student, type [ {application}; {checkStatus};)
rule(position [ {student}; student = student, type [ {application}; {checkStatus}; uid = student)
rule(position [ {faculty}, department [ {ee}; crs = crs, departments [ {ee}, type [ {gradebook}; {readScore, addScore, assignGrade, changeScore};)
rule(position [ {faculty}, department [ {cs}; crs = crs, departments [ {cs}, type [ {gradebook}; {readScore, addScore, assignGrade, changeScore};)
rule(position [ {student}; crsTaken ] crs, departments ] departments, type [ {gradebook}; {readMyScores}; department = departments, crsTaken ] crs, uid = student)
rule(position [ {student}, department [ {ee}; crsTaught ] crs, departments [ {ee}, type [ {gradebook}; {readScore, addScore}; department = departments, crsTaught ] crs)
rule(position [ {student}, department [ {cs}; crsTaught ] crs, departments [ {cs}, type [ {gradebook}; {readScore, addScore}; department = departments, crsTaught ] crs)
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {read, setStatus};)
rule(position [ {student}; crsTaken ] crs, departments ] departments, type [ {gradebook}; {addScore}; department = departments, crsTaken ] crs, uid = student)
rule(position [ {student}; crsTaken ] crs, departments ] departments, type [ {gradebook}; {readScore}; department = departments, crsTaken ] crs, uid = student)
rule(position [ {staff}, department [ {registrar}; crs = crs, departments ] departments, type [ {roster}; {read};)
rule(position [ {staff}; crs = crs, departments ] departments, type [ {roster}; {write}; department = registrar)
