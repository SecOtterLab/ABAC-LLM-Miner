
===============================================================
ITERATION : 4
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}; read)
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; read)
rule(position [ {eeChair}; student = student, departments [ {ee}, type [ {transcript}; read)
rule(position [ {student}, department [ {cs}; crs = crs, type [ {gradebook}; readScore)
rule(position [ {student}, department [ {cs}; crs = crs, type [ {gradebook}; readMyScores)
rule(position [ {student}, department [ {ee}; crs = crs, type [ {gradebook}; addScore)
rule(position [ {student}, department [ {ee}; crs = crs, type [ {gradebook}; readMyScores)
rule(position [ {student}, department [ {cs}; type [ {application}; checkStatus)
rule(position [ {student}, department [ {ee}; type [ {application}; checkStatus)
rule(position [ {student}; student = student, type [ {transcript}; read)
rule(position [ {faculty}, department [ {cs}; crs = crs, type [ {roster}; read)
rule(position [ {faculty}, department [ {ee}; crs = crs, type [ {roster}; read)
rule(position [ {faculty}, department [ {cs}; crs = crs, type [ {gradebook}; {addScore, changeScore, assignGrade, readScore})
rule(position [ {faculty}, department [ {ee}; crs = crs, type [ {gradebook}; {addScore, changeScore, assignGrade, readScore})
rule(position [ {staff}, department [ {registrar}; crs = crs, type [ {roster}; {read, write})
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {read, setStatus})
rule(position [ {applicant}; type [ {application}; checkStatus)

===============================================================
ITERATION : 3
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read}; )
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; {read}; )
rule(position [ {eeChair}; student = student, departments [ {ee}, type [ {transcript}; {read}; )
rule(position [ {student}, department [ {cs}; student = student, departments [ {cs}, type [ {transcript}; {read}; uid = student)
rule(position [ {student}, department [ {ee}; student = student, departments [ {ee}, type [ {transcript}; {read}; uid = student)
rule(position [ {faculty}, department [ {ee}; crs ] crs, type [ {gradebook}; {readScore, assignGrade, addScore, changeScore}; crs = crs)
rule(position [ {faculty}, department [ {cs}; crs ] crs, type [ {gradebook}; {readScore, assignGrade, addScore, changeScore}; crs = crs)
rule(position [ {student}, department [ {cs}; crs ] crs, type [ {gradebook}; {readMyScores, readScore, addScore}; crs ] crs, crsTaken ] crs)
rule(position [ {student}, department [ {ee}; crs ] crs, type [ {gradebook}; {readMyScores, readScore, addScore}; crs ] crs, crsTaken ] crs)
rule(position [ {staff}, department [ {registrar}; departments ] departments, type [ {roster}; {read, write}; departments = departments)
rule(position [ {faculty}, department [ {cs}; departments ] departments, type [ {roster}; {read}; departments = departments, crsTaught ] crs)
rule(position [ {faculty}, department [ {ee}; departments ] departments, type [ {roster}; {read}; departments = departments, crsTaught ] crs)
rule(position [ {student}; student = student, type [ {application}; {checkStatus}; uid = student)
rule(position [ {applicant}; student = student, type [ {application}; {checkStatus}; uid = student)
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {read, setStatus}; )

===============================================================
ITERATION : 2
===============================================================
rule(position [ {registrar}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {csChair}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {admissions}; type [ {application}; acts={setStatus}; student = student)
rule(position [ {eeFac1}; crsTaught ] ee101; crs = ee101, type [ {gradebook}; acts={readScore, assignGrade, addScore, changeScore})
rule(position [ {registrar}; type [ {roster}; acts={write}; departments = departments)
rule(position [ {csFac1}; crsTaught ] cs101; crs = cs101, type [ {roster}; acts={read})
rule(position [ {student}, crsTaken ] crs; crs = crs, type [ {gradebook}; acts={readScore}; )
rule(position [ {student}; type [ {application}; acts={checkStatus}; student = uid)
rule(position [ {registrar}; type [ {roster}; acts={read}; departments = departments)
rule(position [ {admissions}; type [ {application}; acts={read}; student = student)
rule(position [ {eeFac2}; crsTaught ] ee601; crs = ee601, type [ {roster}; acts={read})
rule(position [ {registrar}; type [ {roster}; acts={write}; departments = departments)
rule(position [ {admissions}; type [ {application}; acts={setStatus}; student = student)
rule(position [ {student}; type [ {transcript}; acts={read}; student = uid, departments = departments)
rule(position [ {csFac1}; crsTaught ] cs101; crs = cs101, type [ {gradebook}; acts={addScore, assignGrade, changeScore, readScore})
rule(position [ {student}, crsTaken ] crs; crs = crs, type [ {gradebook}; acts={readMyScores}; )
rule(position [ {eeChair}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {applicant}; type [ {application}; acts={checkStatus}; student = uid)
rule(position [ {eeFac2}; crsTaught ] ee601; crs = ee601, type [ {gradebook}; acts={readScore, assignGrade, addScore, changeScore})
rule(position [ {registrar}; type [ {roster}; acts={read}; departments = departments)
rule(position [ {admissions}; type [ {application}; acts={read}; student = student)
rule(position [ {csFac2}; crsTaught ] cs601; crs = cs601, type [ {gradebook}; acts={readScore, assignGrade, addScore, changeScore})
rule(position [ {eeFac1}; crsTaught ] ee101; crs = ee101, type [ {roster}; acts={read})
rule(position [ {student}; type [ {application}; acts={checkStatus}; student = uid)

===============================================================
ITERATION : 1
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}; read)
rule(position [ {registrar}; crs = crs, type [ {roster}; write)
rule(position [ {registrar}; crs = crs, type [ {roster}; read)
rule(position [ {admissions}; type [ {application}, student = student; {read, setStatus})
rule(position [ {faculty}, department = department; crs = crs, type [ {gradebook}; {readScore, assignGrade, changeScore, addScore})
rule(position [ {student}, department = departments; student = student, type [ {transcript}; read)
rule(position [ {student}; student = student, type [ {application}; checkStatus)
rule(position [ {student}; crsTaken ] crs, type [ {gradebook}; readMyScores)
rule(isChair [ {True}; student = student, type [ {transcript}; read)
rule(position [ {student}; crsTaught ] crs, type [ {gradebook}; {addScore, readScore})
rule(position [ {applicant}; type [ {application}, student = uid; checkStatus)

===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}, departments ] departments; {read};)
rule(position [ {csStu2}; crs ] crs, type [ {gradebook}, departments ] departments; {readScore, addScore};)
rule(isChair [ {True}; student = student, type [ {transcript}, departments ] departments; {read};)
rule(uid = student; student = student, type [ {transcript}, departments ] departments; {read};)
rule(position [ {student}; student = student, type [ {application}, departments ] departments; {checkStatus};)
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}, departments ] departments; {setStatus, read};)
rule(position [ {faculty}; crs ] crs, type [ {gradebook}, departments ] departments; {readScore, addScore, changeScore, assignGrade};)
rule(position [ {faculty}; crs ] crs, type [ {roster}, departments ] departments; {read};)
rule(position [ {registrar}; crs ] crs, type [ {roster}, departments ] departments; {write, read};)
rule(position [ {student}; crs ] crs, type [ {gradebook}, departments ] departments; {readMyScores};)
rule(position [ {applicant}; type [ {application}; {checkStatus};)
