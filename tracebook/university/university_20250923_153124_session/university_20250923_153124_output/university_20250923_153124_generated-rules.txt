
===============================================================
ITERATION : 1
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}, departments ] departments; {read}; )
rule(position [ {csChair}; student = student, department [ {cs}, type [ {transcript}, departments ] departments; {read}; )
rule(position [ {faculty}, department [ {ee}; crs = crs, type [ {gradebook}; {readScore, assignGrade, changeScore, addScore}; )
rule(position [ {faculty}, department [ {cs}; crs = crs, type [ {gradebook}; {readScore, assignGrade, changeScore, addScore}; )
rule(position [ {student}, department [ {cs}; crs = crs, type [ {gradebook}; {readMyScores, readScore, addScore}; )
rule(position [ {student}, department [ {ee}; crs = crs, type [ {gradebook}; {readMyScores, readScore, addScore}; )
rule(position [ {staff}, department [ {registrar}; crs = crs, type [ {roster}; {read, write}; )
rule(position [ {faculty}; crs = crs, type [ {roster}, departments ] departments; {read}; )
rule(position [ {applicant, student}; student = student, type [ {application}; {checkStatus}; )
rule(position [ {student}; student = student, type [ {transcript}, departments ] departments; {read}; )
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {setStatus, read}; )

===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; type [ {transcript}; read)
rule(position [ {admissions}; type [ {application}; {read, setStatus})
rule(position [ {faculty}, department ] crs; type [ {gradebook}; {readScore, addScore, changeScore, assignGrade})
rule(position [ {student}, crsTaken ] crs; type [ {gradebook}; readMyScores)
rule(position [ {faculty}, department ] departments; type [ {roster}; read)
rule(position [ {registrar}; type [ {roster}; {read, write})
rule(position [ {student}, uid = student; type [ {application}; checkStatus)
rule(position [ {student}, uid = student; type [ {transcript}; read)
rule(position [ {faculty}, isChair [ {True}, department ] departments; type [ {transcript}; read)
rule(position [ {applicant}, uid = student; type [ {application}; checkStatus)
