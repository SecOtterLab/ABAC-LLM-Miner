rule(position [ {registrar}; type [ {transcript}; {read}; departments = departments)
rule(position [ {registrar}; type [ {roster}; {write, read}; departments = departments)
rule(position [ {csChair}; type [ {transcript}; {read}; departments = departments)
rule(position [ {admissions}; type [ {application}; {read, setStatus}; )
rule(position [ {faculty}, department [ {ee}; type [ {gradebook}; {readScore, addScore, assignGrade, changeScore}; departments = departments, crsTaught ] crs)
rule(position [ {faculty}, department [ {ee}; type [ {roster}; {read}; departments = departments, crsTaught ] crs)
rule(position [ {student}, department [ {ee}; type [ {gradebook}; {readMyScores, readScore, addScore}; crsTaken ] crs)
rule(position [ {student}, department [ {ee}; type [ {application}; {checkStatus}; student = uid)
rule(position [ {student}, department [ {ee}; type [ {transcript}; {read}; student = uid, departments = departments)
rule(position [ {faculty}, department [ {cs}; type [ {gradebook}; {readScore, addScore, assignGrade, changeScore}; departments = departments, crsTaught ] crs)
rule(position [ {faculty}, department [ {cs}; type [ {roster}; {read}; departments = departments, crsTaught ] crs)
rule(position [ {student}, department [ {cs}; type [ {gradebook}; {readMyScores, readScore, addScore}; crsTaken ] crs)
rule(position [ {student}, department [ {cs}; type [ {application}; {checkStatus}; student = uid)
rule(position [ {student}, department [ {cs}; type [ {transcript}; {read}; student = uid, departments = departments)
rule(position [ {applicant}; type [ {application}; {checkStatus}; student = uid)
