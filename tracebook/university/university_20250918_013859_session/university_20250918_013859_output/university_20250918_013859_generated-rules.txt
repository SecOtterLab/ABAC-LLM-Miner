
===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}; {read})
rule(department [ {cs}; crs ] {cs602}, position [ {student}; {readScore}, crsTaken ] crs)
rule(isChair [ {True}, position [ {faculty}; student = student, type [ {transcript}; {read})
rule(position [ {student}; student = student, type [ {transcript}; {read})
rule(position [ {staff}, department [ {registrar}; crs = crs, type [ {roster}; {write})
rule(position [ {faculty}, department [ {cs}; crs = crs, type [ {roster}; {read})
rule(position [ {student}; student = student, type [ {application}; {checkStatus})
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {setStatus})
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {read})
rule(position [ {faculty}, department [ {ee}; crs = crs, type [ {gradebook}; {readScore})
rule(department [ {cs}, position [ {student}; crs = crs, type [ {gradebook}; {readMyScores}, crsTaken ] crs)
rule(department [ {ee}, position [ {student}; crs = crs, type [ {gradebook}; {readMyScores}, crsTaken ] crs)
rule(position [ {faculty}, department [ {cs}; crs = crs, type [ {gradebook}; {addScore, changeScore, assignGrade})
rule(position [ {faculty}, department [ {ee}; crs = crs, type [ {gradebook}; {addScore, changeScore, assignGrade})
rule(position [ {applicant}; student = student, type [ {application}; {checkStatus})
rule(department [ {cs}, position [ {student}; crs = crs, type [ {gradebook}; {readScore}, crsTaught ] crs)
rule(department [ {ee}, position [ {student}; crs = crs, type [ {gradebook}; {readScore}, crsTaught ] crs)

===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; student ] departments, type [ {transcript}]; {read}; )
rule(position [ {csChair}; student ] departments, type [ {transcript}]; {read}; )
rule(position [ {admissions}; type [ {application}]; {setStatus, read}; )
rule(position [ {faculty}, department [ {ee}; crsTaught ] crs, type [ {gradebook}]; {readScore, addScore, assignGrade, changeScore}; departments ] departments)
rule(position [ {faculty}, department [ {cs}; crsTaught ] crs, type [ {gradebook}]; {readScore, addScore, assignGrade, changeScore}; departments ] departments)
rule(position [ {faculty}, department [ {ee}; crsTaught ] crs, type [ {roster}]; {read}; departments ] departments)
rule(position [ {faculty}, department [ {cs}; crsTaught ] crs, type [ {roster}]; {read}; departments ] departments)
rule(position [ {student}, department [ {cs}; crsTaken ] crs, type [ {gradebook}]; {readScore, addScore, readMyScores}; departments ] departments)
rule(position [ {student}, department [ {ee}; crsTaken ] crs, type [ {gradebook}]; {readScore, addScore, readMyScores}; departments ] departments)
rule(position [ {staff}, department [ {registrar}; type [ {roster}]; {write, read}; )
rule(position [ {applicant}; type [ {application}]; {checkStatus}; student = uid)
rule(position [ {student}; type [ {application}]; {checkStatus}; student = uid)
rule(position [ {student}; type [ {transcript}]; {read}; student = uid)

===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}; {read})
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; {read})
rule(position [ {eeChair}; student = student, departments [ {ee}, type [ {transcript}; {read})
rule(uid = csStu2; type [ {gradebook}, crs = cs602; {readScore})
rule(position [ {student}, department [ {cs}; type [ {gradebook}, crs = cs601; {readMyScores, addScore})
rule(position [ {student}, department [ {ee}; type [ {gradebook}, crs = ee601; {readMyScores, addScore})
rule(position [ {student}, department [ {ee}; type [ {gradebook}, crs = ee602; {readMyScores, addScore})
rule(position [ {student}, department [ {cs}; type [ {gradebook}, crs = cs602; {readMyScores, addScore})
rule(position [ {staff}, department [ {registrar}; type [ {roster}; {write, read})
rule(position [ {staff}, department [ {admissions}; type [ {application}; {setStatus, read})
rule(position [ {faculty}, department [ {ee}; type [ {gradebook}, crs = ee101; {readScore, addScore, assignGrade, changeScore})
rule(position [ {faculty}, department [ {cs}; type [ {gradebook}, crs = cs101; {readScore, addScore, assignGrade, changeScore})
rule(position [ {faculty}, department [ {ee}; type [ {roster}, crs = ee601; {read})
rule(position [ {faculty}, department [ {cs}; type [ {roster}, crs = cs101; {read})
rule(position [ {student}; type [ {application}, student = uid; {checkStatus})
rule(position [ {applicant}; type [ {application}, student = uid; {checkStatus})
rule(position [ {student}; type [ {transcript}, student = uid; {read})
rule(position [ {student}, department [ {ee}; type [ {gradebook}, crs = ee101; {readScore})
rule(uid = csStu2; type [ {gradebook}, crs = cs101; {readScore, addScore})
rule(uid = eeStu1; type [ {gradebook}, crs = ee101; {readMyScores})

===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}, departments ] departments; {read};)
rule(position [ {csChair}; student = student, type [ {transcript}, departments ] {cs}; {read};)
rule(position [ {eeChair}; student = student, type [ {transcript}, departments ] {ee}; {read};)
rule(position [ {student}, department [ {cs}; type [ {gradebook}, departments ] {cs}; {readScore};)
rule(position [ {student}, department [ {cs}; type [ {gradebook}, departments ] {cs}; {readMyScores,addScore};)
rule(position [ {student}, department [ {ee}; type [ {gradebook}, departments ] {ee}; {readScore,addScore,readMyScores};)
rule(position [ {faculty}, department [ {ee}; type [ {gradebook}, departments ] {ee}; {readScore,addScore,changeScore,assignGrade};)
rule(position [ {faculty}, department [ {cs}; type [ {gradebook}, departments ] {cs}; {readScore,addScore,changeScore,assignGrade};)
rule(position [ {staff}, department [ {registrar}; type [ {roster}, departments ] departments; {read,write};)
rule(position [ {faculty}, department [ {cs}; type [ {roster}, departments ] {cs}; {read};)
rule(position [ {faculty}, department [ {ee}; type [ {roster}, departments ] {ee}; {read};)
rule(position [ {applicant, student}; student = uid, type [ {application}; {}; {checkStatus};)
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {}; {read,setStatus};)
