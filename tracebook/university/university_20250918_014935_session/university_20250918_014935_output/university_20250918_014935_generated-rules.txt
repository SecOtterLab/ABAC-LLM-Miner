
===============================================================
ITERATION : 4
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}, departments ] departments; {read};)
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; {read};)
rule(position [ {admissions}; type [ {application}; {setStatus};)
rule(position [ {eeChair}; student = student, departments [ {ee}, type [ {transcript}; {read};)
rule(position [ {faculty}, crsTaught ] crs; crs = crs, type [ {gradebook}; {readScore, addScore, changeScore, assignGrade};)
rule(position [ {staff}, department [ {registrar}; crs = crs, type [ {roster}; {write, read};)
rule(position [ {faculty}; crs = crs, type [ {roster}; {read}; crsTaught ] crs)
rule(position [ {student}, department [ {cs}; crs = crs, type [ {gradebook}; {readMyScores, readScore, addScore}; crsTaken ] crs)
rule(position [ {student}, department [ {ee}; crs = crs, type [ {gradebook}; {readMyScores, readScore, addScore}; crsTaken ] crs)
rule(position [ {applicant}; type [ {application}; {checkStatus}; student = student)
rule(position [ {student}; type [ {application}; {checkStatus}; student = uid)
rule(position [ {staff}, department [ {admissions}; type [ {application}; {read, setStatus};)
rule(position [ {student}; student = student, departments = departments, type [ {transcript}; {read}; department ] departments)

===============================================================
ITERATION : 3
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}, departments ] departments; {read}; )
rule(position [ {csChair}; student = student, department [ {cs}, type [ {transcript}; {read}; )
rule(position [ {admissions}; type [ {application}; {read, setStatus}; )
rule(position [ {staff}, department [ {registrar}; crs = crs, type [ {roster}; {read, write}; )
rule(position [ {faculty}, crsTaught ] crs; crs = crs, type [ {gradebook}; {addScore, changeScore, assignGrade, readScore}; )
rule(position [ {student}, department ] departments, crsTaken ] crs; crs = crs, type [ {gradebook}; {readMyScores, readScore}; )
rule(position [ {student}; student = student, type [ {application}; {checkStatus}; )
rule(position [ {applicant}; student = student, type [ {application}; {checkStatus}; )
rule(position [ {eeChair}; student = student, department [ {ee}, type [ {transcript}; {read}; )

===============================================================
ITERATION : 2
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read}; ])
rule(position [ {csStu2}; rid = csStu2trans; {read}; ])
rule(position [ {csChair}; departments ] departments, type [ {transcript}, type [ {transcript}; {read}; ])
rule(position [ {csStu4}; rid = csStu4trans; {read}; ])
rule(position [ {admissions}; type [ {application}; {setStatus}; ])
rule(position [ {eeFac1}; crsTaught ] crs, type [ {gradebook}, crs = crs; {readScore}; ])
rule(position [ {csFac1}; crsTaught ] crs, type [ {roster}, crs = crs; {read}; ])
rule(position [ {registrar}; departments ] departments, crs = crs, type [ {roster}; {write}; ])
rule(position [ {csStu3}; type [ {gradebook}; {readScore, addScore}; ])
rule(position [ {registrar}; departments ] departments, crs = crs, type [ {roster}; {read}; ])
rule(position [ {admissions}; type [ {application}; {read}; ])
rule(position [ {eeStu5}; rid = eeStu5trans; {read}; ])
rule(position [ {eeChair}; departments ] departments, type [ {transcript}; {read}; ])
rule(position [ {csFac1}; crsTaught ] crs, type [ {gradebook}, crs = crs; {addScore, changeScore, assignGrade, readScore}; ])
rule(position [ {eeStu2}; type [ {gradebook}; {addScore, readScore}; ])
rule(position [ {eeStu4}; rid = eeStu4trans; {read}; ])
rule(position [ {applicant}; type [ {application}; {checkStatus}; ])
rule(position [ {eeFac2}; crsTaught ] crs, type [ {roster}, crs = crs; {read}; ])
rule(position [ {eeFac2}; crsTaught ] crs, type [ {gradebook}, crs = crs; {readScore, changeScore, assignGrade, addScore}; ])
rule(position [ {csChair}; departments ] departments, type [ {transcript}; {read}; ])
rule(position [ {csStu3}; type [ {gradebook}; {readMyScores}; ])
rule(position [ {eeStu2}; rid = eeStu2trans; {read, checkStatus}; ])
rule(position [ {csStu5}; rid = csStu5trans; {checkStatus}; ])
rule(position [ {eeStu5}; type [ {gradebook}; {readMyScores}; ])
rule(position [ {admissions}; type [ {application}; {setStatus, read}; ])
rule(position [ {csStu2}; type [ {gradebook}, type [ {transcript}; {readScore, addScore, read}; ])
rule(position [ {csStu2}; rid = csStu2trans; {read, checkStatus}; ])
rule(position [ {csStu4}; type [ {gradebook}; {readMyScores}; ])
rule(position [ {eeStu1}; type [ {gradebook}; {readMyScores}; ])
rule(position [ {eeStu3}; type [ {gradebook}; {addScore, readScore}; ])
rule(position [ {eeStu3}; rid = eeStu3trans; {read, checkStatus}; ])
rule(position [ {csStu1}; type [ {gradebook}; {readMyScores}; ])
rule(position [ {eeStu4}; type [ {gradebook}; {readMyScores}; ])
rule(position [ {csFac2}; crsTaught ] crs, type [ {roster}, crs = crs; {read}; ])
rule(position [ {csStu5}; type [ {gradebook}; {readMyScores}; ])
rule(position [ {eeStu1}; rid = eeStu1trans, type [ {application}; {read, checkStatus, setStatus}; ])
rule(position [ {csStu1}; rid = csStu1trans, type [ {application}; {read, checkStatus, setStatus, checkStatus}; ])

===============================================================
ITERATION : 1
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read}; )
rule(position [ {csChair}; student = student, departments ] departments, type [ {transcript}; {read}; department = cs )
rule(position [ {eeChair}; student = student, departments ] departments, type [ {transcript}; {read}; department = ee )
rule(position [ {student}; student = student, departments ] departments, type [ {transcript}; {read}; uid = student )
rule(position [ {student}; rid = rid, type [ {gradebook}; {readMyScores}; crsTaken ] crs )
rule(position [ {student}; rid = rid, type [ {gradebook}; {addScore, readScore}; crsTaught ] crs )
rule(position [ {faculty}; departments ] departments, type [ {gradebook}; {readScore, addScore, changeScore, assignGrade}; departments ] departments )
rule(position [ {faculty}; rid = rid, type [ {roster}; {read}; crsTaught ] crs )
rule(position [ {faculty}; departments ] departments, type [ {roster}; {write}; isChair = True, departments ] departments )
rule(position [ {applicant, student}; type [ {application}; {checkStatus}; uid = student )
rule(position [ {staff}; type [ {roster}; {read, write}; department = registrar )
rule(position [ {staff}; type [ {application}; {read, setStatus}; department = admissions )
rule(position [ {student, applicant}; type [ {application}; {read, setStatus}; department = admissions )

===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {registrar}; type [ {roster}; acts={read, write}; departments = departments)
rule(position [ {admissions}; type [ {application}; acts={read, setStatus}; )
rule(position [ {faculty}, crsTaught ] crs; type [ {gradebook}; acts={readScore, addScore, assignGrade, changeScore}; departments = departments, crs = crs)
rule(position [ {student}, crsTaken ] crs; type [ {gradebook}; acts={readMyScores}; departments = departments, crs = crs)
rule(position [ {student}; type [ {transcript, application}; acts={checkStatus}; uid = student)
rule(isChair [ {True}; type [ {transcript}; acts={read}; departments = departments, student = student)
rule(position [ {student}; type [ {transcript}; acts={read}; departments = departments, student = uid)
rule(position [ {applicant}; type [ {application}; acts={checkStatus}; uid = student)
