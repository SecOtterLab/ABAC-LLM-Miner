
===============================================================
ITERATION : 4
===============================================================
rule(position [ {registrar}; type [ {transcript}; acts = {read}; departments = departments)
rule(position [ {csChair}; type [ {transcript}; acts = {read}; departments = {cs})
rule(position [ {eeChair}; type [ {transcript}; acts = {read}; departments = {ee})
rule(position [ {student}, uid = student; type [ {transcript}; acts = {read}; departments = department)
rule(position [ {faculty}; crsTaught ] crs; type [ {gradebook}; acts = {readScore, addScore, assignGrade, changeScore}; crs = crs)
rule(position [ {student}; crsTaken ] crs; type [ {gradebook}; acts = {readMyScores}; crs = crs)
rule(position [ {staff}, department = registrar; type [ {roster}; acts = {write, read}; departments = departments)
rule(position [ {faculty}; crsTaught ] crs; type [ {roster}; acts = {read}; crs = crs)
rule(position [ {student}; type [ {application}, student = uid; acts = {checkStatus})
rule(position [ {applicant}, uid = student; type [ {application}; acts = {checkStatus})
rule(position [ {staff}, department = admissions; type [ {application}; acts = {read, setStatus}; student = student)
rule(position [ {student}; crsTaught ] crs; type [ {gradebook}; acts = {readScore, addScore}; crs = crs)
rule(position [ {student}; crsTaught ] crs; type [ {roster}; acts = {read}; crs = crs)
rule(position [ {student}; crsTaken ] crs; type [ {gradebook}; acts = {readScore, addScore}; crs = crs)

===============================================================
ITERATION : 3
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}; {read})
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; {read})
rule(position [ {eeChair}; student = student, departments [ {ee}, type [ {transcript}; {read})
rule(position [ {student}, uid = student; type [ {transcript}; {read})
rule(position [ {student}; crsTaken ] crs, type [ {gradebook}; {readMyScores})
rule(position [ {student}; crsTaught ] crs, type [ {gradebook}; {addScore, readScore})
rule(position [ {student}; uid = student, type [ {application}; {checkStatus})
rule(position [ {faculty}; crsTaught ] crs, type [ {roster}; {read})
rule(position [ {faculty}; crsTaught ] crs, type [ {gradebook}; {addScore, changeScore, readScore, assignGrade})
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {read, setStatus})
rule(position [ {staff}, department [ {registrar}; crs = crs, type [ {roster}; {write, read})
rule(position [ {student}; crsTaught ] crs, type [ {roster}; {read})

===============================================================
ITERATION : 2
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read};)
rule(position [ {csChair}; student = student, departments ] departments, type [ {transcript}; {read};)
rule(position [ {admissions}; student = student, type [ {application}; {setStatus, read};)
rule(position [ {faculty}, department [ {ee}; crsTaught ] crs; crs = crs, type [ {gradebook}; {readScore, assignGrade, changeScore, addScore};)
rule(position [ {faculty}, department [ {cs}; crsTaught ] crs; crs = crs, type [ {gradebook}; {readScore, assignGrade, changeScore, addScore};)
rule(position [ {faculty}, department [ {cs}; crsTaught ] crs; crs = crs, type [ {roster}; {read, addScore};)
rule(position [ {faculty}, department [ {ee}; crsTaught ] crs; crs = crs, type [ {roster}; read;)
rule(position [ {student}; rid = student + "trans", type [ {transcript}; {read}; uid = student)
rule(position [ {student}; crsTaken ] crs; crs = crs, type [ {gradebook}; {readMyScores};)
rule(position [ {student}; rid = student + "application", type [ {application}; {checkStatus}; uid = student)
rule(position [ {applicant}; rid = student, type [ {application}; {checkStatus}; uid = student)
rule(position [ {student}, department [ {ee}; crsTaught ] crs; crs = crs, type [ {gradebook}; {addScore, readScore};)
rule(position [ {staff}, department [ {registrar}; crs = crs, departments ] departments, type [ {roster}; {read, write};)

===============================================================
ITERATION : 1
===============================================================
rule(position [ {registrar}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {csChair}; type [ {transcript}; acts={read}; departments = {cs})
rule(position [ {eeChair}; type [ {transcript}; acts={read}; departments = {ee})
rule(position [ {student}, uid ] student; type [ {transcript}; acts={read}; student = uid)
rule(position [ {staff}, department [ {registrar}; type [ {roster}; acts={write, read}; departments = departments)
rule(position [ {faculty}, department [ {cs}; crsTaught ] crs; type [ {roster, gradebook}; acts={read, addScore, changeScore, assignGrade}; crs = crs)
rule(position [ {faculty}, department [ {ee}; crsTaught ] crs; type [ {roster, gradebook}; acts={read, addScore, changeScore, assignGrade}; crs = crs)
rule(position [ {student}, crsTaken ] crs; type [ {gradebook}; acts={readMyScores, addScore, readScore}; crs = crs)
rule(position [ {applicant}; type [ {application}; acts={checkStatus}; student = uid)
rule(position [ {student}; type [ {application}; acts={checkStatus}; student = uid)
rule(position [ {staff}, department [ {admissions}; type [ {application}; acts={setStatus, read}; student = student)
rule(position [ {student}; type [ {application}; acts={readScore}; crs = crs)
rule(position [ {student}; type [ {gradebook}; acts={addScore}; crs = crs)
rule(position [ {applicant}; type [ {application}; acts={read}; student = uid)
rule(position [ {student}; type [ {transcript}; acts={addScore}; crs = crs)

===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {csChair}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {admissions}; type [ {application}; acts={read}; ; student = student)
rule(position [ {admissions}; type [ {application}; acts={setStatus}; ; student = student)
rule(position [ {faculty}, crsTaught ] crs; type [ {gradebook}; acts={addScore, changeScore, assignGrade, readScore}; crs = crs)
rule(position [ {faculty}; type [ {roster}; acts={read}; crsTaught ] crs; crs = crs)
rule(position [ {student}; type [ {gradebook}; acts={readScore, readMyScores}; crsTaken ] crs; crs = crs)
rule(position [ {applicant, student}; type [ {application}; acts={checkStatus}; student = uid)
rule(position [ {faculty}; type [ {roster}; acts={write}; department = departments)
rule(position [ {staff}; department [ {registrar}; type [ {roster}; acts={read, write}; departments = departments)
rule(position [ {student}; type [ {transcript}; acts={read}; uid = student)
