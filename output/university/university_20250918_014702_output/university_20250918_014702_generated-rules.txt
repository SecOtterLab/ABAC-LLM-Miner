
===============================================================
ITERATION : 4
===============================================================
rule(position [ {registrar}; type [ {transcript}; acts [ {read}; departments = departments)
rule(position [ {csChair}; type [ {transcript}; acts [ {read}; departments = departments)
rule(position [ {eeChair}; type [ {transcript}; acts [ {read}; departments = departments)
rule(position [ {student}, uid ] student; type [ {transcript}; acts [ {read}; student = student)
rule(position [ {faculty}; type [ {gradebook}; acts [ {readScore, addScore, changeScore, assignGrade}; crs ] crs)
rule(position [ {student}; type [ {gradebook}; acts [ {readMyScores}; crs ] crs, crsTaken ] crs)
rule(position [ {staff}, department [ {admissions}; type [ {application}; acts [ {setStatus};)
rule(position [ {staff}, department [ {admissions}; type [ {application}; acts [ {read};)
rule(position [ {applicant}; type [ {application}; acts [ {checkStatus}; student = uid)
rule(position [ {student}; type [ {application}; acts [ {checkStatus}; student = uid)
rule(position [ {faculty}; type [ {roster}; acts [ {read}; crs ] crs)
rule(position [ {staff}, department [ {registrar}; type [ {roster}; acts [ {read, write}; departments = departments)

===============================================================
ITERATION : 3
===============================================================
rule(position [ {registrar}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {csChair}; type [ {transcript}; acts={read}; departments = {cs})
rule(position [ {eeChair}; type [ {transcript}; acts={read}; departments = {ee})
rule(position [ {student}, uid = student; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {faculty}; crsTaught ] crs; type [ {gradebook}; acts={addScore, changeScore, readScore, assignGrade}; crs = crs)
rule(position [ {staff}, department [ {registrar}; type [ {roster}; acts={write, read}; departments = departments)
rule(position [ {faculty}; crsTaught ] crs; type [ {roster}; acts={read}; crs = crs)
rule(position [ {student}; crsTaken ] crs; type [ {gradebook}; acts={readScore}; crs = crs)
rule(position [ {student}, uid = student; type [ {application}; acts={checkStatus})
rule(position [ {applicant}, uid = student; type [ {application}; acts={checkStatus})
rule(position [ {student}; crsTaken ] crs; type [ {gradebook}; acts={readMyScores}; crs = crs)
rule(position [ {staff}, department [ {admissions}; type [ {application}; acts={setStatus, read})
rule(position [ {student}; type [ {application}; acts={checkStatus}; student = uid)

===============================================================
ITERATION : 2
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read}; )
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; {read}; )
rule(position [ {eeChair}; student = student, departments [ {ee}, type [ {transcript}; {read}; )
rule(position [ {student}, department [ {cs}; type [ {gradebook}, crs = crs; {readScore addScore changeScore assignGrade}, crsTaken ] crs )
rule(position [ {student}, department [ {cs}; type [ {gradebook}, crs = crs; {readMyScores}; crsTaken ] crs )
rule(position [ {student}, department [ {ee}; type [ {gradebook}, crs = crs; {readScore addScore changeScore assignGrade}, crsTaken ] crs )
rule(position [ {student}, department [ {ee}; type [ {gradebook}, crs = crs; {readMyScores}; crsTaken ] crs )
rule(position [ {faculty}, department [ {cs}; type [ {roster gradebook}], crs = crs, departments [ {cs}; {read readScore addScore changeScore assignGrade}; crsTaught ] crs )
rule(position [ {faculty}, department [ {ee}; type [ {roster gradebook}], crs = crs, departments [ {ee}; {read readScore addScore changeScore assignGrade}; crsTaught ] crs )
rule(position [ {staff}, department [ {registrar}; type [ {roster}; {read write}; departments ] departments )
rule(position [ {applicant student}; type [ {application}; {checkStatus}; student = student )
rule(position [ {staff}, department [ {admissions}; type [ {application}; {read setStatus}; student = student )

===============================================================
ITERATION : 1
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}, departments ] departments; {read}; )
rule(position [ {csStu2}; type [ {gradebook}, crs ] crs, departments [ {cs}; {readScore, addScore}; )
rule(isChair [ {True}; type [ {transcript}, student ] student; {read}; )
rule(uid = student; type [ {transcript}, student ] student; {read}; )
rule(position [ {registrar}; type [ {roster}, crs ] crs, departments [ {cs}; {write}; )
rule(position [ {student}; type [ {transcript}, student ] student; {read}; )
rule(position [ {staff}; type [ {application}, student ] student; {setStatus, read}; )
rule(position [ {faculty}; type [ {gradebook}, crs ] crs, departments ] departments; {readScore, assignGrade, addScore, changeScore}; )
rule(position [ {faculty}; type [ {roster}, crs ] crs, departments ] departments; {read}; )
rule(position [ {student}, department ] departments, crsTaken ] crs; type [ {gradebook}, crs ] crs, departments [ {cs, ee}; {readMyScores}; )
rule(uid = student; type [ {application}, student ] student; {checkStatus}; )
rule(position [ {registrar}; type [ {roster}, crs ] crs, departments [ {cs, ee}; {read}; )
rule(position [ {student}, department ] departments; type [ {transcript}, student ] student; {read}; )
rule(position [ {applicant}; type [ {application}, student ] student; {checkStatus}; )
rule(position [ {student}, department ] departments, crsTaken ] crs; type [ {gradebook}, crs ] crs, departments [ {cs, ee}; {addScore}; )

===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}, departments ] departments; {read};)
rule(position [ {csChair}; student = student, type [ {transcript}, departments ] {cs}; {read};)
rule(position [ {eeChair}; student = student, type [ {transcript}, departments ] {ee}; {read};)
rule(position [ {student}, department ] {cs}; crs = crs, type [ {gradebook}; {readScore, addScore, readMyScores};)
rule(position [ {student}, department ] {ee}; crs = crs, type [ {gradebook}; {readScore, addScore, readMyScores};)
rule(position [ {faculty}, department ] {cs}; crs = crs, type [ {roster}; {read, write};)
rule(position [ {faculty}, department ] {ee}; crs = crs, type [ {roster}; {read, write};)
rule(position [ {faculty}, department ] {cs}; crs = crs, type [ {gradebook}; {readScore, addScore, changeScore, assignGrade};)
rule(position [ {faculty}, department ] {ee}; crs = crs, type [ {gradebook}; {readScore, addScore, changeScore, assignGrade};)
rule(position [ {applicant, student}; student = student, type [ {application}; {checkStatus};)
rule(position [ {staff}, department ] {admissions}; student = student, type [ {application}; {read, setStatus};)
rule(position [ {student}; student = student, type [ {transcript}; {read};)
rule(position [ {student}; student = student, type [ {application}; {checkStatus};)
