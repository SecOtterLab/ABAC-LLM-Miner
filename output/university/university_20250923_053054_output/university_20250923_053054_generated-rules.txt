
===============================================================
ITERATION : 4
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read}; ])
rule(position [ {csChair}; student = student, departments [ {cs}; {read}; ])
rule(position [ {eeChair}; student = student, departments [ {ee}; {read}; ])
rule(position [ {student}, department [ {cs}; departments ] {cs}, type [ {gradebook}; {readScore}; ])
rule(position [ {student}, department [ {ee}; departments ] {ee}, type [ {gradebook}; {readScore}; ])
rule(position [ {faculty}, department [ {ee}; type [ {gradebook}, crs ] crsTaught; {readScore, assignGrade, addScore, changeScore}; ])
rule(position [ {faculty}, department [ {cs}; type [ {gradebook}, crs ] crsTaught; {readScore, assignGrade, addScore, changeScore}; ])
rule(position [ {student}; student = student, type [ {transcript}; {read}; ])
rule(position [ {student}; student = student, type [ {application}; {checkStatus}; ])
rule(position [ {staff}, department [ {admissions}; type [ {application}; {read, setStatus}; ])
rule(position [ {staff}, department [ {registrar}; type [ {roster}; {write, read}; ])
rule(position [ {student}, department [ {cs}; type [ {gradebook}, crs ] crsTaken; {readMyScores}; ])
rule(position [ {student}, department [ {ee}; type [ {gradebook}, crs ] crsTaken; {readMyScores}; ])
rule(position [ {applicant}; student = student, type [ {application}; {checkStatus}; ])
rule(position [ {student}; student = student, type [ {application}; {checkStatus}; ])
rule(position [ {student}, crsTaught ] crs; type [ {gradebook}; {addScore, readScore}; crs = crs])

===============================================================
ITERATION : 3
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read}; ])
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; {read}; ])
rule(position [ {admissions}; type [ {application}; {setStatus}; ])
rule(position [ {admissions}; type [ {application}; {read}; ])
rule(position [ {faculty}; crsTaught ] crs, type [ {gradebook}; {readScore, addScore, changeScore, assignGrade}; crs = crs)
rule(position [ {student}; uid = student, type [ {transcript}; {read}; departments ] departments)
rule(position [ {student}; crsTaken ] crs, type [ {gradebook}; {readMyScores}; crs = crs)
rule(position [ {student}; type [ {application}; {checkStatus}; student = uid)
rule(position [ {applicant}; type [ {application}; {checkStatus}; student = uid)
rule(position [ {faculty}; crsTaught ] crs, type [ {roster}; {read}; crs = crs)
rule(position [ {registrar}; departments ] departments, type [ {roster}; {read, write}; departments = departments)
rule(position [ {student}; crsTaught ] crs, type [ {gradebook}; {addScore, readScore}; crs = crs)

===============================================================
ITERATION : 2
===============================================================
rule(position [ {registrar}; type [ {transcript}; acts [ {read}; departments = departments)
rule(position [ {registrar}; type [ {roster}; acts [ {write, read}; departments = departments, crs = crs)
rule(position [ {csChair}; type [ {transcript}; acts [ {read}; departments = {cs})
rule(position [ {admissions}; type [ {application}; acts [ {read, setStatus}; student = student)
rule(position [ {faculty}, department [ {ee}; type [ {gradebook}; acts [ {readScore, assignGrade, changeScore, addScore}; departments = {ee}, crs = crs)
rule(position [ {faculty}, department [ {cs}; type [ {gradebook}; acts [ {readScore, assignGrade, changeScore, addScore}; departments = {cs}, crs = crs)
rule(position [ {faculty}; type [ {roster}; acts [ {read}; crsTaught ] crs)
rule(position [ {student}; type [ {application}; acts [ {checkStatus}; student = uid)
rule(position [ {student}; type [ {transcript}; acts [ {read}; student = uid, departments = department)
rule(position [ {student}; type [ {gradebook}; acts [ {readScore, addScore, readMyScores}; crsTaken ] crs, department = departments)
rule(position [ {applicant}; type [ {application}; acts [ {checkStatus}; student = uid)
rule(position [ {faculty}, department [ {ee}; type [ {roster}; acts [ {read}; crsTaught ] crs)

===============================================================
ITERATION : 1
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}; {read}; departments = departments)
rule(position [ {csChair}; student = student, type [ {transcript}; {read}; departments [ {cs})
rule(position [ {eeChair}; student = student, type [ {transcript}; {read}; departments [ {ee})
rule(uid ] {csStu2}; type [ {gradebook}, crs = cs, departments [ {cs}; {readScore, addScore};)
rule(uid ] {csStu3}; type [ {gradebook}, crs = cs, departments [ {cs}; {readScore, addScore};)
rule(uid ] {csStu5}; type [ {gradebook}, crs = cs, departments [ {cs}; {readMyScores};)
rule(uid ] {eeStu2}; type [ {gradebook}, crs = ee, departments [ {ee}; {readScore, addScore};)
rule(uid ] {eeStu3}; type [ {gradebook}, crs = ee, departments [ {ee}; {readScore, addScore};)
rule(uid ] {eeStu5}; type [ {gradebook}, crs = ee, departments [ {ee}; {readMyScores};)
rule(position [ {faculty}, department [ {cs}; type [ {gradebook}, crs = cs, departments [ {cs}; {readScore, addScore, changeScore, assignGrade};)
rule(position [ {faculty}, department [ {ee}; type [ {gradebook}, crs = ee, departments [ {ee}; {readScore, addScore, changeScore, assignGrade};)
rule(position [ {student}; type [ {application}, student = uid; {checkStatus};)
rule(position [ {applicant}; type [ {application}, student = uid; {checkStatus};)
rule(position [ {staff}, department [ {admissions}; type [ {application}, student = student; {read, setStatus};)
rule(position [ {faculty}, department [ {cs}; type [ {roster}, crs = cs, departments [ {cs}; {read};)
rule(position [ {faculty}, department [ {ee}; type [ {roster}, crs = ee, departments [ {ee}; {read};)
rule(position [ {staff}, department [ {registrar}; type [ {roster}, departments = departments; {read, write};)
rule(uid ] {csStu2}; type [ {gradebook}, crs = cs, departments [ {cs}; {readMyScores};)
rule(uid ] {csStu4}; type [ {gradebook}, crs = cs, departments [ {cs}; {readMyScores};)
rule(uid ] {eeStu1}; type [ {gradebook}, crs = ee, departments [ {ee}; {readMyScores};)
rule(uid ] {eeStu4}; type [ {gradebook}, crs = ee, departments [ {ee}; {readMyScores};)
rule(position [ {student}; type [ {transcript}, student = uid; {read};)

===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}; {read}; department = departments)
rule(position [ {csChair}; student = student, type [ {transcript}; {read}; department [ {cs})
rule(position [ {eeChair}; student = student, type [ {transcript}; {read}; department [ {ee})
rule(position [ {student}; uid = student, type [ {transcript}; {read})
rule(position [ {csStu2}; type [ {gradebook}; {readScore, addScore}; crs = crsTaken)
rule(position [ {csStu3}; type [ {gradebook}; {readScore, addScore}; crs = crsTaken)
rule(position [ {eeStu2}; type [ {gradebook}; {readScore, addScore}; crs = crsTaken)
rule(position [ {eeStu3}; type [ {gradebook}; {readScore, addScore}; crs = crsTaken)
rule(position [ {csStu5}; type [ {gradebook}; {readMyScores}; crs = crsTaken)
rule(position [ {eeStu5}; type [ {gradebook}; {readMyScores}; crs = crsTaken)
rule(position [ {csStu4}; type [ {gradebook}; {readMyScores}; crs = crsTaken)
rule(position [ {eeStu4}; type [ {gradebook}; {readMyScores}; crs = crsTaken)
rule(position [ {csStu1}; type [ {gradebook}; {readMyScores}; crs = crsTaken)
rule(position [ {eeStu1}; type [ {gradebook}; {readMyScores}; crs = crsTaken)
rule(position [ {faculty}, department [ {cs}; type [ {gradebook}; {readScore, addScore, assignGrade, changeScore}; departments [ {cs}, crs = crsTaught)
rule(position [ {faculty}, department [ {ee}; type [ {gradebook}; {readScore, addScore, assignGrade, changeScore}; departments [ {ee}, crs = crsTaught)
rule(position [ {faculty}, department [ {cs}; type [ {roster}; {read, write}; departments [ {cs}, crs = crsTaught)
rule(position [ {faculty}, department [ {ee}; type [ {roster}; {read, write}; departments [ {ee}, crs = crsTaught)
rule(position [ {student}; uid = student, type [ {application}; {checkStatus})
rule(position [ {applicant}; uid = student, type [ {application}; {checkStatus})
rule(position [ {staff}, department [ {admissions}; type [ {application}; {read, setStatus})
rule(position [ {staff}, department [ {registrar}; type [ {roster}; {read, write}; departments = departments)
rule(position [ {staff}, department [ {registrar}; student = student, type [ {transcript}; {read}; department = departments)
