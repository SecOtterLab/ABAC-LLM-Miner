
===============================================================
ITERATION : 4
===============================================================
rule(position [ {registrar}; type [ {transcript}; acts [ {read}; departments = department)
rule(position [ {csChair}; type [ {transcript}; acts [ {read}; departments = department)
rule(position [ {admissions}; type [ {application}; acts [ {setStatus}; departments = department)
rule(position [ {admissions}; type [ {application}; acts [ {read})
rule(position [ {faculty}, crsTaught ] crs; type [ {gradebook}; acts [ {readScore, addScore, assignGrade, changeScore}; departments = department, crs = crs)
rule(position [ {student}, crsTaught ] crs; type [ {gradebook}; acts [ {readScore}; departments = department, crs = crs)
rule(position [ {student}, crsTaken ] crs; type [ {gradebook}; acts [ {readMyScores}; departments = department, crs = crs)
rule(position [ {faculty}; type [ {roster}; acts [ {read}; departments = department, crs = crs)
rule(position [ {staff}; type [ {roster}; acts [ {read, write}; departments = department, crs = crs)
rule(position [ {applicant, student}; type [ {application}; acts [ {checkStatus}; student = uid)
rule(position [ {student}; type [ {transcript}; acts [ {read}; student = uid, departments = department)

===============================================================
ITERATION : 3
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}, departments ] departments; {read}; )
rule(position [ {csChair}; student = student, type [ {transcript}, departments ] departments; {read}; )
rule(position [ {admissions}; type [ {application}; student = student; {setStatus}; )
rule(position [ {faculty}, department [ {ee}; type [ {gradebook}; {readScore, assignGrade, changeScore, addScore}; departments ] departments, crs = crs)
rule(position [ {faculty}, department [ {cs}; type [ {roster}; {read}; departments ] departments, crs = crs)
rule(position [ {faculty}, department [ {ee}; type [ {roster}; {read}; departments ] departments, crs = crs)
rule(position [ {faculty}, department [ {cs}; type [ {gradebook}; {assignGrade, changeScore, addScore}; departments ] departments, crs = crs)
rule(position [ {student}, department [ {ee}; type [ {gradebook}; {readMyScores}; departments ] departments, crsTaken ] crs)
rule(position [ {student}, department [ {cs}; type [ {gradebook}; {readMyScores}; departments ] departments, crsTaken ] crs)
rule(position [ {student}, department [ {cs}; type [ {gradebook}; {addScore, readScore}; departments ] departments, crsTaught ] crs)
rule(position [ {student}, department [ {ee}; type [ {gradebook}; {addScore, readScore}; departments ] departments, crsTaught ] crs)
rule(position [ {student}; type [ {application}; student = uid; {checkStatus}; )
rule(position [ {student}; student = uid, type [ {transcript}, departments ] departments; {read}; )
rule(position [ {admissions}; type [ {application}; student = student; {read}; )
rule(position [ {staff}, department [ {registrar}; type [ {roster}; {write}; departments ] departments, crs = crs)
rule(position [ {staff}, department [ {registrar}; type [ {roster}; {read}; departments ] departments, crs = crs)
rule(position [ {applicant}; type [ {application}; student = uid; {checkStatus}; )
rule(position [ {student}, department [ {cs}; type [ {gradebook}; {readScore}; departments ] departments, crsTaken ] crs)
rule(position [ {student}, department [ {ee}; type [ {gradebook}; {readScore}; departments ] departments, crsTaken ] crs)

===============================================================
ITERATION : 2
===============================================================
rule(position [ {registrar}; departments [ {cs}; type [ {transcript}; {read})
rule(position [ {registrar}; departments [ {ee}; type [ {transcript}; {read})
rule(position [ {registrar}; departments [ {cs}; type [ {roster}; {write})
rule(position [ {registrar}; departments [ {cs}; type [ {roster}; {read})
rule(position [ {registrar}; departments [ {ee}; type [ {roster}; {write})
rule(position [ {registrar}; departments [ {ee}; type [ {roster}; {read})
rule(position [ {admissions}; type [ {application}; {setStatus})
rule(position [ {admissions}; type [ {application}; {read})
rule(position [ {faculty}, department [ {ee}; type [ {gradebook}; {readScore, assignGrade, changeScore, addScore})
rule(position [ {faculty}, department [ {cs}; type [ {gradebook}; {readScore, assignGrade, changeScore, addScore})
rule(position [ {student}; type [ {gradebook}, crs ] crsTaken; {readMyScores, addScore, readScore})
rule(position [ {student}; type [ {application}, student = uid; {checkStatus})
rule(position [ {faculty}, isChair [ {True}; type [ {transcript}; {read})

===============================================================
ITERATION : 1
===============================================================
rule(position [ {registrar}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {registrar}; type [ {roster}; acts={read, write}; departments = departments)
rule(position [ {admissions}; type [ {application}; acts={read, setStatus}; student = student)
rule(position [ {faculty}, department [ {ee}; type [ {gradebook}; acts={readScore, assignGrade, addScore, changeScore}; departments = departments)
rule(position [ {student}, department [ {cs}; crsTaken ] crs; type [ {gradebook}; acts={readScore, addScore, readMyScores}; crs = crs)
rule(position [ {student}, department [ {ee}; crsTaken ] crs; type [ {gradebook}; acts={readScore, addScore, readMyScores}; crs = crs)
rule(position [ {chair}, department [ {cs}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {student}, department [ {cs}; type [ {transcript}; acts={read}; student = student)
rule(position [ {staff}, department [ {registrar}; type [ {roster}; acts={write}; departments = departments)
rule(position [ {faculty}, department [ {cs}; type [ {roster}; acts={read}; departments = departments)
rule(position [ {student}; type [ {application}; acts={checkStatus}; student = student)
rule(position [ {chair}, department [ {ee}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {student}, department [ {ee}; type [ {transcript}; acts={read}; student = student)
rule(position [ {applicant}; type [ {application}; acts={checkStatus}; student = student)
rule(position [ {faculty}, department [ {ee}; type [ {roster}; acts={read}; departments = departments)
rule(position [ {applicant}; type [ {application}; acts={read, setStatus}; student = student)

===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read};])
rule(position [ {csChair}; student = student, departments [ {cs}; {read};])
rule(position [ {eeChair}; student = student, departments [ {ee}; {read};])
rule(position [ {student}, department [ {cs}; departments [ {cs}, student = uid, type [ {transcript}; {read};])
rule(position [ {student}, department [ {ee}; departments [ {ee}, student = uid, type [ {transcript}; {read};])
rule(position [ {student}; student = uid, type [ {application}; {checkStatus};])
rule(position [ {applicant}; student = uid, type [ {application}; {checkStatus};])
rule(position [ {student}, department [ {cs}; crsTaken ] crs, type [ {gradebook}, departments [ {cs}, crs = crs; {readMyScores};])
rule(position [ {student}, department [ {ee}; crsTaken ] crs, type [ {gradebook}, departments [ {ee}, crs = crs; {readMyScores};])
rule(position [ {student}, department [ {cs}; crsTaught ] crs, type [ {gradebook}, departments [ {cs}, crs = crs; {addScore, readScore};])
rule(position [ {faculty}, department [ {cs}; crsTaught ] crs, type [ {gradebook}, departments [ {cs}, crs = crs; {readScore, addScore, changeScore, assignGrade};])
rule(position [ {student}, department [ {ee}; crsTaught ] crs, type [ {gradebook}, departments [ {ee}, crs = crs; {addScore, readScore};])
rule(position [ {faculty}, department [ {ee}; crsTaught ] crs, type [ {gradebook}, departments [ {ee}, crs = crs; {readScore, addScore, changeScore, assignGrade};])
rule(position [ {staff}, department [ {registrar}; departments ] departments, type [ {roster}; {write, read};])
rule(position [ {faculty}, department [ {cs}; departments ] departments, type [ {roster}; {read};])
rule(position [ {faculty}, department [ {ee}; departments ] departments, type [ {roster}; {read};])
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {read, setStatus};])
