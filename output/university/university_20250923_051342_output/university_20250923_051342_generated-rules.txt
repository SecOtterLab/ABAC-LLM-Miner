
===============================================================
ITERATION : 4
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read};)
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; {read};)
rule(position [ {eeChair}; student = student, departments [ {ee}, type [ {transcript}; {read};)
rule(position [ {staff}, department [ {registrar}; crs = crs, departments ] departments, type [ {roster}; {write};)
rule(position [ {faculty}, department [ {cs}; crs = crs, departments [ {cs}, type [ {roster}; {read};)
rule(position [ {student}, department [ {cs}; departments [ {cs}, type [ {transcript}; {read}; uid = student)
rule(position [ {student}, department [ {ee}; departments [ {ee}, type [ {transcript}; {read}; uid = student)
rule(position [ {applicant}; student = student, type [ {application}; {checkStatus};)
rule(position [ {student}; student = student, type [ {application}; {checkStatus}; uid = student)
rule(position [ {faculty}, department [ {ee}; crs = crs, departments [ {ee}, type [ {gradebook}; {readScore, addScore, assignGrade, changeScore};)
rule(position [ {faculty}, department [ {cs}; crs = crs, departments [ {cs}, type [ {gradebook}; {readScore, addScore, assignGrade, changeScore};)
rule(position [ {student}; crsTaken ] crs, departments ] departments, type [ {gradebook}; {readMyScores}; department = departments, crsTaken ] crs, uid = student)
rule(position [ {student}, department [ {ee}; crsTaught ] crs, departments [ {ee}, type [ {gradebook}; {readScore, addScore}; department = departments, crsTaught ] crs)
rule(position [ {student}, department [ {cs}; crsTaught ] crs, departments [ {cs}, type [ {gradebook}; {readScore, addScore}; department = departments, crsTaught ] crs)
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {read, setStatus};)
rule(position [ {student}; crsTaken ] crs, departments ] departments, type [ {gradebook}; {addScore}; department = departments, crsTaken ] crs, uid = student)
rule(position [ {student}; crsTaken ] crs, departments ] departments, type [ {gradebook}; {readScore}; department = departments, crsTaken ] crs, uid = student)
rule(position [ {staff}, department [ {registrar}; crs = crs, departments ] departments, type [ {roster}; {read};)
rule(position [ {staff}; crs = crs, departments ] departments, type [ {roster}; {write}; department = registrar)

===============================================================
ITERATION : 3
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read}; )
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; {read}; )
rule(position [ {eeChair}; student = student, departments [ {ee}, type [ {transcript}; {read}; )
rule(position [ {student}, department [ {cs}; student = student, departments [ {cs}, type [ {transcript}, rid = uid + trans; {read}; )
rule(position [ {student}, department [ {ee}; student = student, departments [ {ee}, type [ {transcript}, rid = uid + trans; {read}; )
rule(position [ {staff}, department [ {registrar}; crs = crs, departments ] departments, type [ {roster}; {write, read}; )
rule(position [ {faculty}, department [ {cs}; crs = crs, departments ] departments, type [ {roster}; {read}; )
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {setStatus, read}; )
rule(position [ {applicant}; student = uid, type [ {application}; {checkStatus}; )
rule(position [ {student}; student = uid, type [ {application}, rid = uid + application; {checkStatus}; )
rule(position [ {faculty}; crsTaught ] crs, departments ] departments, crs = crs, type [ {gradebook}; {readScore, addScore, changeScore, assignGrade}; )
rule(position [ {student}; crsTaken ] crs, departments ] departments, crs = crs, type [ {gradebook}; {readScore}; )
rule(position [ {student}; crsTaken ] crs, departments ] departments, crs = crs, type [ {gradebook}, rid = crs + gradebook; {readMyScores}; )

===============================================================
ITERATION : 2
===============================================================
rule(position [ {registrar}; departments [ {cs}; type [ {transcript}; {read})
rule(position [ {registrar}; departments [ {ee}; type [ {transcript}; {read})
rule(position [ {csChair}; type [ {transcript}; {read})
rule(position [ {admissions}; type [ {application}; {setStatus})
rule(position [ {admissions}; type [ {application}; {read})
rule(position [ {registrar}; type [ {roster}; {write})
rule(position [ {csChair}; department [ {cs}; type [ {transcript}; {read})
rule(position [ {faculty}, crsTaught ] crs; departments ] departments, type [ {gradebook}; {addScore, changeScore, assignGrade, readScore})
rule(position [ {student}, crsTaken ] crs; departments ] departments, type [ {gradebook}; {readMyScores, readScore})
rule(position [ {student}; type [ {application}, student = uid; {checkStatus})
rule(position [ {faculty}; departments ] departments, type [ {roster}; {read})
rule(position [ {registrar}; departments ] departments, type [ {roster}; {read})
rule(position [ {student}; type [ {transcript}, student = uid; {read})
rule(position [ {applicant}; type [ {application}, student = uid; {checkStatus})

===============================================================
ITERATION : 1
===============================================================
rule(position [ {registrar}; type [ {transcript}; read; departments = departments)
rule(position [ {csChair}; type [ {transcript}, student ] {csStu1 csStu2 csStu3 csStu4 csStu5}; read; department = departments)
rule(position [ {eeChair}; type [ {transcript}, student ] {eeStu1 eeStu2 eeStu3 eeStu4 eeStu5}; read; department = departments)
rule(position [ {student}, uid ] {csStu2}; type [ {gradebook}; readScore; crs = crs)
rule(position [ {student}, uid ] {csStu4}; type [ {transcript}; read; department = departments, student = uid)
rule(position [ {staff}, department ] {admissions}; type [ {application}; setStatus; )
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; )
rule(position [ {staff}, department ] {registrar}; type [ {roster}; write; departments = departments)
rule(position [ {faculty}, department ] {cs}; type [ {roster}; read; crs = crs)
rule(position [ {student}, uid ] {csStu3}; type [ {gradebook}; readScore, addScore; crs = crs)
rule(position [ {student}, uid ] {eeStu2}; type [ {gradebook}; addScore, readScore; crs = crs)
rule(position [ {applicant}; type [ {application}; checkStatus; student = uid)
rule(position [ {staff}, department ] {registrar}; type [ {roster}; read; departments = departments)
rule(position [ {staff}, department ] {registrar}; type [ {gradebook}; read; departments = departments)
rule(position [ {student}, uid ] {csStu5}; type [ {gradebook}; readMyScores; crs = crs)
rule(position [ {student}, uid ] {eeStu5}; type [ {transcript}; read; student = uid, department = departments)
rule(position [ {staff}, department ] {registrar}; type [ {transcript}; read; student = student, department = departments)
rule(position [ {student}; type [ {application}; checkStatus; student = uid)
rule(position [ {faculty}, department ] {ee}; type [ {roster}; read; crs = crs)
rule(position [ {staff}, department ] {registrar}; type [ {roster}; read; crs = crs)
rule(position [ {student}; type [ {gradebook}; readMyScores; crs = crs)
rule(position [ {student}, uid ] {eeStu1}; type [ {gradebook}; readMyScores; crs = crs)
rule(position [ {staff}, department ] {admissions}; type [ {application}; setStatus, read; )
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {student}, uid ] {csStu1}; type [ {transcript}; read; department = departments, student = uid)
rule(position [ {student}, uid ] {eeStu3}; type [ {transcript}; read; student = uid, department = departments)
rule(position [ {student}, uid ] {eeStu4}; type [ {transcript}; read; student = uid, department = departments)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; setStatus; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {staff}, department ] {registrar}; type [ {transcript}; read; departments = departments, student = student)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {faculty}, department ] {cs}; type [ {roster}; read; crs = crs)
rule(position [ {faculty}, department ] {ee}; type [ {roster}; read; crs = crs)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {student}, uid ] {eeStu2}; type [ {application}; checkStatus; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {student}, uid ] {csStu2}; type [ {application}; checkStatus; student = student)
rule(position [ {student}, uid ] {csStu3}; type [ {transcript}; read; department = departments, student = uid)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {faculty}, department ] {ee}; type [ {roster}; read; crs = crs)
rule(position [ {student}, uid ] {eeStu4}; type [ {application}; checkStatus; student = student)
rule(position [ {staff}, department ] {registrar}; type [ {roster}; write; crs = crs)
rule(position [ {student}, uid ] {csStu3}; type [ {gradebook}; readMyScores; crs = crs)
rule(position [ {faculty}, department ] {cs}; type [ {roster}; read; crs = crs)
rule(position [ {student}, uid ] {csStu4}; type [ {gradebook}; readMyScores; crs = crs)
rule(position [ {student}, uid ] {csStu5}; type [ {transcript}; read; department = departments, student = uid)
rule(position [ {faculty}, department ] {ee}; type [ {roster}; read; crs = crs)
rule(position [ {staff}, department ] {registrar}; type [ {roster}; write; crs = crs)
rule(position [ {staff}, department ] {registrar}; type [ {roster}; read; crs = crs)
rule(position [ {staff}, department ] {registrar}; type [ {transcript}; read; crs = crs)
rule(position [ {staff}, department ] {registrar}; type [ {roster}; write; crs = crs)
rule(position [ {faculty}, department ] {cs}; type [ {roster}; read; crs = crs)
rule(position [ {staff}, department ] {registrar}; type [ {roster}; write; crs = crs)
rule(position [ {student}, uid ] {eeStu3}; type [ {application}; checkStatus; student = student)
rule(position [ {student}, uid ] {csStu1}; type [ {application}; checkStatus; student = student)
rule(position [ {student}, uid ] {csStu2}; type [ {gradebook}; addScore; crs = crs)
rule(position [ {staff}, department ] {registrar}; type [ {roster}; write; crs = crs)
rule(position [ {staff}, department ] {registrar}; type [ {roster}; read; crs = crs)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {student}, uid ] {eeStu1}; type [ {application}; checkStatus; student = student)
rule(position [ {student}, uid ] {eeStu5}; type [ {application}; checkStatus; student = student)
rule(position [ {staff}, department ] {registrar}; type [ {roster}; read; crs = crs)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {staff}, department ] {admissions}; type [ {application}; setStatus; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {student}, uid ] {eeStu1}; type [ {transcript}; read; department = departments, student = uid)
rule(position [ {staff}, department ] {admissions}; type [ {application}; setStatus; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; setStatus; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; setStatus; student = student)
rule(position [ {staff}, department ] {admissions}; type [ {application}; setStatus; student = student)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {staff}, department ] {registrar}; type [ {transcript}; read; departments = departments, student = student)
rule(position [ {student}, uid ] {eeStu2}; type [ {transcript}; read; student = uid, department = departments)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {staff}, department ] {admissions}; type [ {application}; setStatus; student = student)
rule(position [ {student}, uid ] {csStu4}; type [ {transcript}; read; student = uid, department = departments)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {staff}, department ] {registrar}; type [ {transcript}; read; departments = departments, student = student)
rule(position [ {student}, uid ] {csStu2}; type [ {transcript}; read; student = uid, department = departments)
rule(position [ {student}, uid ] {csStu5}; type [ {application}; checkStatus; student = student)
rule(position [ {student}, uid ] {eeStu5}; type [ {gradebook}; readMyScores; crs = crs)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {student}, uid ] {csStu1}; type [ {gradebook}; readMyScores; crs = crs)
rule(position [ {student}, uid ] {eeStu4}; type [ {gradebook}; readMyScores; crs = crs)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {student}, uid ] {csStu5}; type [ {transcript}; read; student = uid, department = departments)
rule(position [ {student}, uid ] {eeStu5}; type [ {gradebook}; readMyScores; crs = crs)
rule(position [ {student}, uid ] {eeStu3}; type [ {gradebook}; readMyScores; crs = crs)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {student}, uid ] {csStu5}; type [ {gradebook}; readMyScores; crs = crs)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {student}, uid ] {eeStu3}; type [ {transcript}; read; department = departments, student = uid)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {student}, uid ] {eeStu3}; type [ {application}; checkStatus; student = student)
rule(position [ {student}, uid ] {csStu5}; type [ {gradebook}; readMyScores; crs = crs)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {student}, uid ] {eeStu3}; type [ {transcript}; read; department = departments, student = uid)
rule(position [ {student}, uid ] {csStu5}; type [ {gradebook}; readMyScores; crs = crs)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {student}, uid ] {eeStu3}; type [ {transcript}; read; department = departments, student = uid)
rule(position [ {student}, uid ] {csStu5}; type [ {gradebook}; readMyScores; crs = crs)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {student}, uid ] {csStu5}; type [ {transcript}; read; student = student)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {student}, uid ] {csStu5}; type [ {transcript}; read; student = student)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {staff}, department ] {admissions}; type [ {application}; read; student = student)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {cs}; type [ {gradebook}; addScore, assignGrade, readScore, changeScore; crs = crs)
rule(position [ {faculty}, department ] {ee}; type [ {gradebook}; readScore, assignGrade, addScore, changeScore; crs = crs)

===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}; {read}; departments = departments)
rule(position [ {csChair}; student = student, type [ {transcript}; {read}; departments = {cs})
rule(position [ {eeChair}; student = student, type [ {transcript}; {read}; departments = {ee})
rule(position [ {student}, department [ {cs}; crs = crs, type [ {gradebook}; {readScore, addScore, readMyScores}; departments = {cs})
rule(position [ {student}, department [ {ee}; crs = crs, type [ {gradebook}; {readScore, addScore, readMyScores}; departments = {ee})
rule(position [ {faculty}, department [ {cs}; crs = crs, type [ {gradebook, roster}; {readScore, addScore, changeScore, assignGrade, read}; departments = {cs})
rule(position [ {faculty}, department [ {ee}; crs = crs, type [ {gradebook, roster}; {readScore, addScore, changeScore, assignGrade, read}; departments = {ee})
rule(position [ {staff}, department [ {registrar}; crs = crs, type [ {roster}; {read, write}; departments = departments)
rule(position [ {applicant, student}; student = student, type [ {application}; {checkStatus};)
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {setStatus, read};)
