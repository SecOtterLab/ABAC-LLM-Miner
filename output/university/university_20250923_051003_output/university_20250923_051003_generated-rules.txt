
===============================================================
ITERATION : 4
===============================================================
rule(position [ {registrar}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {admissions}; type [ {application}; acts={read, setStatus}; student = student)
rule(position [ {faculty}, department = departments; type [ {gradebook}; acts={readScore, addScore, changeScore, assignGrade}; crsTaught ] crs)
rule(position [ {faculty}, department = departments; type [ {roster}; acts={read}; crsTaught ] crs)
rule(position [ {student}, department = departments; type [ {gradebook}; acts={readMyScores}; crsTaken ] crs)
rule(position [ {student}; type [ {transcript}; acts={read}; student = uid)
rule(position [ {student}; type [ {application}; acts={checkStatus}; student = uid)
rule(isChair [ {True}, department = departments; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {staff}, department = {registrar}; type [ {roster}; acts={write, read}; departments = departments)
rule(position [ {student}; type [ {gradebook}; acts={readScore, addScore}; crsTaught ] crs)
rule(position [ {applicant}; type [ {application}; acts={checkStatus}; student = uid)

===============================================================
ITERATION : 3
===============================================================
rule(position [ {registrar}; student ] departments, type [ {transcript}; {read})
rule(position [ {admissions}; type [ {application}; {setStatus})
rule(position [ {admissions}; type [ {application}; {read})
rule(position [ {faculty}, isChair [ {True}; type [ {transcript}; {read})
rule(position [ {faculty}; crsTaught ] crs, type [ {gradebook}; {addScore, changeScore, assignGrade, readScore})
rule(position [ {faculty}; crsTaught ] crs, type [ {roster}; {read})
rule(position [ {student}; crsTaken ] crs, type [ {gradebook}; {readScore})
rule(position [ {student}; crsTaught ] crs, type [ {gradebook}; {addScore, readScore})
rule(position [ {student}; department = departments, student = uid, type [ {transcript}; {read})
rule(position [ {student}; student = uid, type [ {application}; {checkStatus})
rule(position [ {student}; crsTaken ] crs, type [ {gradebook}; {readMyScores})
rule(position [ {student}; crsTaught ] crs, type [ {gradebook}; {readMyScores})
rule(position [ {staff}, department [ {registrar}; type [ {roster}; {read, write})
rule(position [ {applicant}; student = uid, type [ {application}; {checkStatus})
rule(position [ {staff}, department [ {registrar}; type [ {roster}; {read})
rule(position [ {staff}, department [ {registrar}; departments = departments, type [ {gradebook}; {read})
rule(position [ {staff}, department [ {registrar}; student ] departments, type [ {transcript}; {read})

===============================================================
ITERATION : 2
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read}; )
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; {read}; )
rule(position [ {eeChair}; student = student, departments [ {ee}, type [ {transcript}; {read}; )
rule(position [ {student}, department [ {cs}; student = student, departments [ {cs}, type [ {transcript}; {read}; )
rule(position [ {student}, department [ {ee}; student = student, departments [ {ee}, type [ {transcript}; {read}; )
rule(position [ {student}, department [ {cs}; crs ] crs, departments [ {cs}, type [ {gradebook}; {readScore, addScore, readMyScores}; )
rule(position [ {student}, department [ {ee}; crs ] crs, departments [ {ee}, type [ {gradebook}; {readScore, addScore, readMyScores}; )
rule(position [ {faculty}, department [ {cs}; crs ] crs, departments [ {cs}, type [ {gradebook}; {readScore, addScore, changeScore, assignGrade}; )
rule(position [ {faculty}, department [ {ee}; crs ] crs, departments [ {ee}, type [ {gradebook}; {readScore, addScore, changeScore, assignGrade}; )
rule(position [ {faculty}, department [ {cs}; crs ] crs, departments [ {cs}, type [ {roster}; {read, write}; )
rule(position [ {faculty}, department [ {ee}; crs ] crs, departments [ {ee}, type [ {roster}; {read, write}; )
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {read, setStatus}; )
rule(position [ {applicant}; student = student, type [ {application}; {checkStatus}; )
rule(position [ {student}; student = student, type [ {application}; {checkStatus}; )

===============================================================
ITERATION : 1
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read}; ])
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; {read}; ])
rule(position [ {admissions}; student = student, type [ {application}; {setStatus, read}; ])
rule(position [ {faculty}, department = department; departments [ department, type [ {gradebook}; {addScore, assignGrade, changeScore, readScore}; ])
rule(position [ {faculty}, department = department; departments [ department, type [ {roster}; {read, write}; ])
rule(position [ {student}, crsTaken ] crs; crs = crs, departments [ department, type [ {gradebook}; {readScore}; ])
rule(position [ {student}, crsTaken ] crs; crs = crs, departments [ department, type [ {gradebook}; {readMyScores}; ])
rule(position [ {student}; student = uid, type [ {application}; {checkStatus}; ])
rule(position [ {student}; student = uid, type [ {transcript}; {read}; ])
rule(position [ {applicant}; student = uid, type [ {application}; {checkStatus}; ])

===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; type [ {transcript}; read; departments = departments)
rule(position [ {csChair}; type [ {transcript}, department [ {cs}; read; student = student)
rule(position [ {eeChair}; type [ {transcript}, department [ {ee}; read; student = student)
rule(position [ {student}, uid = student; type [ {transcript}; read; department = department)
rule(position [ {admissions}; type [ {application}; {read setStatus}; student = student)
rule(position [ {faculty}, crsTaught ] crs; type [ {gradebook}; {readScore addScore changeScore assignGrade}; departments = departments)
rule(position [ {student}, crsTaken ] crs; type [ {gradebook}; readScore; departments = departments)
rule(position [ {student}, crsTaken ] crs; type [ {gradebook}; readMyScores; departments = departments)
rule(position [ {faculty}; type [ {roster}; read; departments = departments, crsTaught ] crs)
rule(position [ {registrar}; type [ {roster}; {read write}; departments = departments)
rule(position [ {applicant}; type [ {application}; checkStatus; student = uid)
rule(position [ {student}, uid = student; type [ {application}; checkStatus)
