
===============================================================
ITERATION : 4
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}; {read})
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; {read})
rule(position [ {eeChair}; student = student, departments [ {ee}, type [ {transcript}; {read})
rule(position [ {student}, uid = student; type [ {transcript}; {read})
rule(position [ {student}; crsTaken ] crs, type [ {gradebook}; {readMyScores})
rule(position [ {student}; crsTaught ] crs, type [ {gradebook}; {readScore, addScore})
rule(position [ {faculty}; crsTaught ] crs, type [ {gradebook}; {readScore, addScore, changeScore, assignGrade})
rule(position [ {staff}, department [ {registrar}; crs = crs, type [ {roster}; {read, write})
rule(position [ {faculty}; crs = crs, type [ {roster}; {read})
rule(position [ {applicant, student}, uid = student; type [ {application}; {checkStatus})
rule(position [ {staff}, department [ {admissions}; type [ {application}; {read, setStatus})

===============================================================
ITERATION : 3
===============================================================
rule(position [ {registrar}; departments [ {cs}; type [ {transcript}; read)
rule(position [ {registrar}; departments [ {ee}; type [ {transcript}; read)
rule(position [ {student}, uid ] csStu2; type [ {gradebook}, crs ] cs602; readScore)
rule(isChair [ {True}; departments [ {cs}; type [ {transcript}, student ] csStu2; read)
rule(uid ] csStu2; type [ {transcript}, student ] csStu2; read)
rule(position [ {student}, uid ] csStu4; type [ {transcript}, student ] csStu4; read)
rule(position [ {admissions}; type [ {application}, student ] eeStu3; setStatus)
rule(position [ {faculty}, department ] ee; type [ {gradebook}, crs ] ee101; readScore)
rule(position [ {admissions}; type [ {application}, student ] applicant1; read)
rule(position [ {registrar}; departments [ {ee}; type [ {roster}, crs ] ee101; write)
rule(position [ {faculty}, department ] cs; type [ {roster}, crs ] cs101; read)
rule(uid ] csStu1; type [ {application}, student ] csStu1; checkStatus)
rule(position [ {registrar}; departments [ {cs}; type [ {roster}, crs ] cs602; read)
rule(position [ {admissions}; type [ {application}, student ] eeStu5; setStatus)
rule(position [ {registrar}; departments [ {ee}; type [ {roster}, crs ] ee101; write)
rule(position [ {student}, uid ] csStu3; type [ {gradebook}, crs ] cs601; readScore)
rule(position [ {admissions}; type [ {application}, student ] csStu4; read)
rule(position [ {admissions}; type [ {application}, student ] eeStu1; setStatus)
rule(position [ {student}, uid ] csStu5; crsTaken ] cs601; type [ {gradebook}, crs ] cs601; readMyScores)
rule(uid ] csStu5; type [ {application}, student ] csStu5; checkStatus)
rule(uid ] eeStu5; type [ {transcript}, student ] eeStu5; read)
rule(isChair [ {True}; departments [ {ee}; type [ {transcript}, student ] eeStu1; read)
rule(position [ {student}, uid ] csStu3; type [ {transcript}, student ] csStu3; read)
rule(position [ {faculty}, department ] cs, crsTaught ] cs101; type [ {gradebook}, crs ] cs101; {addScore, changeScore, assignGrade})
rule(position [ {student}, uid ] eeStu2; type [ {gradebook}, crs ] ee101; addScore)
rule(position [ {student}, uid ] eeStu2; type [ {gradebook}, crs ] ee602; addScore)
rule(position [ {student}, uid ] eeStu4; type [ {application}, student ] eeStu4; checkStatus)
rule(isChair [ {True}; departments [ {ee}; type [ {transcript}, student ] eeStu2; read)
rule(position [ {applicant}, uid ] applicant1; type [ {application}, student ] applicant1; checkStatus)
rule(position [ {faculty}, department ] ee; type [ {roster}, crs ] ee601; read)
rule(position [ {admissions}; type [ {application}, student ] csStu2; read)
rule(position [ {registrar}; departments [ {ee}; type [ {roster}, crs ] ee601; read)
rule(position [ {registrar}; departments [ {cs}; type [ {roster}, crs ] cs602; write)
rule(position [ {admissions}; type [ {application}, student ] applicant2; {read, setStatus})
rule(isChair [ {True}; departments [ {cs}; type [ {transcript}, student ] csStu1; read)
rule(position [ {admissions}; type [ {application}, student ] csStu5; read)
rule(position [ {student}, uid ] csStu3; type [ {gradebook}, crs ] cs601; addScore)
rule(position [ {student}, uid ] eeStu2; type [ {gradebook}, crs ] ee602; readScore)
rule(position [ {student}, uid ] csStu3; type [ {gradebook}, crs ] cs602; readMyScores)
rule(position [ {faculty}, department ] ee; type [ {gradebook}, crs ] ee101; assignGrade)
rule(position [ {admissions}; type [ {application}, student ] csStu4; setStatus)
rule(isChair [ {True}; departments [ {cs}; type [ {transcript}, student ] csStu3; read)
rule(position [ {student}, uid ] eeStu5; type [ {gradebook}, crs ] ee602; readMyScores)
rule(position [ {admissions}; type [ {application}, student ] csStu3; setStatus)
rule(isChair [ {True}; departments [ {ee}; type [ {transcript}, student ] eeStu5; read)
rule(position [ {registrar}; departments [ {ee}; type [ {roster}, crs ] ee602; read)
rule(isChair [ {True}; departments [ {ee}; type [ {transcript}, student ] eeStu4; read)
rule(position [ {registrar}; departments [ {cs}; type [ {roster}, crs ] cs101; read)
rule(position [ {admissions}; type [ {application}, student ] csStu5; setStatus)
rule(position [ {registrar}; departments [ {cs}; type [ {roster}, crs ] cs601; read)
rule(position [ {admissions}; type [ {application}, student ] eeStu1; read)
rule(position [ {admissions}; type [ {application}, student ] eeStu4; setStatus)
rule(position [ {student}, uid ] csStu2; crsTaken ] cs601; type [ {gradebook}, crs ] cs601; readMyScores)
rule(uid ] eeStu5; type [ {application}, student ] eeStu5; checkStatus)
rule(position [ {admissions}; type [ {application}, student ] csStu1; read)
rule(uid ] eeStu2; type [ {gradebook}, crs ] ee601; readMyScores)
rule(position [ {admissions}; type [ {application}, student ] eeStu3; read)
rule(uid ] eeStu1; type [ {application}, student ] eeStu1; checkStatus)
rule(position [ {admissions}; type [ {application}, student ] eeStu4; read)
rule(position [ {admissions}; type [ {application}, student ] eeStu2; read)
rule(position [ {admissions}; type [ {application}, student ] csStu1; setStatus)
rule(position [ {admissions}; type [ {application}, student ] eeStu5; read)
rule(position [ {registrar}; departments [ {ee}; type [ {roster}, crs ] ee601; write)
rule(position [ {registrar}; departments [ {cs}; type [ {roster}, crs ] cs101; write)
rule(position [ {student}, uid ] eeStu3; type [ {gradebook}, crs ] ee601; addScore)
rule(position [ {student}, uid ] csStu4; type [ {transcript}, student ] csStu4; read)
rule(position [ {faculty}, department ] cs, crsTaught ] cs101; type [ {gradebook}, crs ] cs101; assignGrade)
rule(position [ {admissions}; type [ {application}, student ] eeStu5; setStatus)
rule(position [ {student}, uid ] eeStu4; type [ {transcript}, student ] eeStu4; read)
rule(position [ {student}, uid ] eeStu2; type [ {gradebook}, crs ] ee101; readScore)
rule(position [ {admissions}; type [ {application}, student ] eeStu2; read)
rule(uid ] csStu4; crsTaken ] cs601; type [ {gradebook}, crs ] cs601; readMyScores)
rule(position [ {admissions}; type [ {application}, student ] csStu1; setStatus)
rule(position [ {faculty}, department ] ee; type [ {roster}, crs ] ee101; read)
rule(position [ {faculty}, department ] ee; type [ {gradebook}, crs ] ee601; changeScore)
rule(position [ {registrar}; departments [ {ee}; type [ {roster}, crs ] ee101; read)
rule(position [ {admissions}; type [ {application}, student ] applicant2; setStatus)
rule(position [ {student}, uid ] eeStu3; type [ {gradebook}, crs ] ee601; readScore)
rule(position [ {admissions}; type [ {application}, student ] csStu2; setStatus)
rule(position [ {registrar}; departments [ {cs}; type [ {roster}, crs ] cs601; write)
rule(position [ {admissions}; type [ {application}, student ] csStu3; read)
rule(position [ {faculty}, department ] cs; type [ {gradebook}, crs ] cs601; changeScore)
rule(uid ] csStu2; type [ {application}, student ] csStu2; checkStatus)
rule(position [ {registrar}; departments [ {ee}; type [ {roster}, crs ] ee602; write)
rule(uid ] eeStu5; crsTaken ] ee601; type [ {gradebook}, crs ] ee601; readMyScores)
rule(position [ {faculty}, department ] cs; type [ {gradebook}, crs ] cs601; assignGrade)
rule(position [ {registrar}; departments [ {cs}; type [ {roster}, crs ] cs601; read)
rule(uid ] eeStu1; type [ {transcript}, student ] eeStu1; read)
rule(position [ {registrar}; departments [ {ee}; type [ {roster}, crs ] ee601; read)
rule(position [ {registrar}; departments [ {cs}; type [ {roster}, crs ] cs601; write)
rule(position [ {admissions}; type [ {application}, student ] applicant1; setStatus)
rule(position [ {admissions}; type [ {application}, student ] eeStu4; setStatus)
rule(uid ] eeStu3; type [ {gradebook}, crs ] ee602; readMyScores)
rule(position [ {registrar}; departments [ {ee}; type [ {roster}, crs ] ee101; read)
rule(isChair [ {True}; departments [ {cs}; type [ {transcript}, student ] csStu4; read)
rule(position [ {registrar}; departments [ {cs}; type [ {transcript}, student ] csStu5; read)
rule(position [ {admissions}; type [ {application}, student ] csStu4; read)
rule(position [ {applicant}, uid ] applicant2; type [ {application}, student ] applicant2; checkStatus)
rule(uid ] eeStu2; type [ {application}, student ] eeStu2; checkStatus)
rule(uid ] csStu5; crsTaken ] cs601; type [ {gradebook}, crs ] cs602; readMyScores)
rule(position [ {admissions}; type [ {application}, student ] applicant2; read)
rule(position [ {registrar}; departments [ {ee}; type [ {roster}, crs ] ee601; write)
rule(position [ {faculty}, department ] ee; type [ {gradebook}, crs ] ee101; addScore)
rule(position [ {admissions}; type [ {application}, student ] csStu2; setStatus)
rule(position [ {faculty}, department ] ee; type [ {gradebook}, crs ] ee601; assignGrade)
rule(position [ {faculty}, department ] ee; type [ {gradebook}, crs ] ee101; changeScore)
rule(position [ {student}, uid ] csStu2; type [ {gradebook}, crs ] cs602; addScore)
rule(position [ {admissions}; type [ {application}, student ] eeStu5; setStatus)
rule(position [ {faculty}, department ] cs; type [ {gradebook}, crs ] cs101; readScore)
rule(position [ {student}, uid ] eeStu3; type [ {transcript}, student ] eeStu3; read)
rule(position [ {admissions}; type [ {application}, student ] csStu3; read)
rule(position [ {registrar}; departments [ {cs}; type [ {roster}, crs ] cs101; read)
rule(uid ] eeStu1; type [ {gradebook}, crs ] ee101; readMyScores)
rule(position [ {faculty}, department ] ee; type [ {gradebook}, crs ] ee601; addScore)
rule(uid ] eeStu3; type [ {application}, student ] eeStu3; checkStatus)
rule(position [ {student}, uid ] csStu2; type [ {gradebook}, crs ] cs101; readScore)
rule(position [ {faculty}, department ] cs; type [ {gradebook}, crs ] cs601; addScore)
rule(position [ {admissions}; type [ {application}, student ] csStu4; setStatus)
rule(position [ {admissions}; type [ {application}, student ] eeStu3; read)
rule(uid ] csStu5; type [ {application}, student ] csStu5; read)
rule(isChair [ {True}; departments [ {cs}; type [ {transcript}, student ] csStu5; read)
rule(uid ] csStu1; type [ {gradebook}, crs ] cs101; readMyScores)
rule(position [ {admissions}; type [ {application}, student ] eeStu2; setStatus)
rule(uid ] eeStu4; crsTaken ] ee601; type [ {gradebook}, crs ] ee601; readMyScores)
rule(position [ {admissions}; type [ {application}, student ] eeStu5; read)
rule(position [ {registrar}; departments [ {ee}; type [ {roster}, crs ] ee602; write)
rule(isChair [ {True}; departments [ {cs}; type [ {transcript}, student ] csStu2; read)
rule(position [ {student}, uid ] csStu2; type [ {gradebook}, crs ] cs101; addScore)
rule(uid ] csStu1; type [ {transcript}, student ] csStu1; read)

===============================================================
ITERATION : 2
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}; {read}; department = departments)
rule(position [ {csChair}; student = student, type [ {transcript}; {read}; department = {cs})
rule(position [ {eeChair}; student = student, type [ {transcript}; {read}; department = {ee})
rule(position [ {student}; student = uid, type [ {transcript}; {read})
rule(position [ {faculty}; crsTaught ] crs, type [ {gradebook}; {addScore, changeScore, assignGrade, readScore}; departments ] department)
rule(position [ {faculty}; crsTaught ] crs, type [ {roster}; {read}; departments ] department)
rule(position [ {staff}; type [ {roster}; {read, write}; department = departments, crs = crs, departments = departments; )
rule(position [ {applicant}; type [ {application}; {checkStatus}; student = uid)
rule(position [ {student}; type [ {application}; {checkStatus}; student = uid)
rule(position [ {student}; department = departments, type [ {gradebook}; {readMyScores}; crsTaken ] crs)
rule(position [ {staff}; type [ {application}; {read, setStatus};)
rule(position [ {student}; type [ {application}; {checkStatus}; student = uid)
rule(position [ {student}; type [ {transcript}; {read}; student = uid)
rule(position [ {student}; type [ {gradebook}; crsTaken ] crs; {readScore, addScore};)

===============================================================
ITERATION : 1
===============================================================
rule(position [ {registrar}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {csChair}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {admissions}; type [ {application}; acts={setStatus}; student = student)
rule(position [ {eeFac1}; crsTaught ] ee101; crs = ee101, type [ {gradebook}; acts={readScore, assignGrade, addScore, changeScore})
rule(position [ {registrar}; crs = cs101, type [ {roster}; acts={write, read}; departments = departments)
rule(position [ {student}; type [ {application}; acts={checkStatus}; uid = student)
rule(position [ {registrar}; crs = cs602, type [ {roster}; acts={read, write}; departments = departments)
rule(position [ {student}; crsTaken ] cs601; crs = cs601, type [ {gradebook}; acts={readScore}; department = departments)
rule(position [ {student}; crsTaken ] cs601; crs = cs601, type [ {gradebook}; acts={readMyScores}; department = departments)
rule(position [ {staff}; department [ {admissions}; type [ {application}; acts={read}; student = student)
rule(position [ {registrar}; crs = ee101, type [ {roster}; acts={write, read}; departments = departments)
rule(position [ {csFac1}; crsTaught ] cs101; crs = cs101, type [ {roster}; acts={read}; departments = departments)
rule(position [ {registrar}; crs = ee601, type [ {roster}; acts={write, read}; departments = departments)
rule(position [ {registrar}; crs = cs601, type [ {roster}; acts={write, read}; departments = departments)
rule(position [ {student}; crsTaken ] ee601; crs = ee601, type [ {gradebook}; acts={readMyScores}; department = departments)
rule(position [ {student}; crsTaken ] ee602; crs = ee602, type [ {gradebook}; acts={readMyScores}; department = departments)
rule(position [ {faculty}; crsTaught ] cs101; crs = cs101, type [ {gradebook}; acts={addScore, assignGrade, changeScore, readScore}; departments = departments)
rule(position [ {faculty}; crsTaught ] ee601; crs = ee601, type [ {gradebook}; acts={readScore, assignGrade, addScore, changeScore}; departments = departments)
rule(position [ {faculty}; crsTaught ] cs601; crs = cs601, type [ {gradebook}; acts={readScore, assignGrade, addScore, changeScore}; departments = departments)
rule(position [ {faculty}; crsTaught ] ee101; crs = ee101, type [ {roster}; acts={read}; departments = departments)
rule(position [ {faculty}; crsTaught ] cs601; crs = cs601, type [ {roster}; acts={read}; departments = departments)
rule(position [ {applicant}; type [ {application}; acts={checkStatus}; uid = student)
rule(position [ {student}; crsTaught ] ee101, crsTaken ] ee601; crs = ee101, type [ {gradebook}; acts={addScore}; departments = departments)
rule(position [ {student}; crsTaught ] ee602, crsTaken ] ee601; crs = ee602, type [ {gradebook}; acts={addScore}; departments = departments)
rule(position [ {student}; crsTaught ] cs101, crsTaken ] cs601; crs = cs101, type [ {gradebook}; acts={addScore}; departments = departments)
rule(position [ {student}; crsTaught ] cs602, crsTaken ] cs601; crs = cs602, type [ {gradebook}; acts={addScore}; departments = departments)
rule(position [ {student}; crsTaken ] ee101; crs = ee101, type [ {gradebook}; acts={readMyScores}; department = departments)
rule(position [ {student}; crsTaken ] cs101; crs = cs101, type [ {gradebook}; acts={readMyScores, readScore}; department = departments)
rule(position [ {student}; crsTaken ] ee601; type [ {transcript}; acts={read}; departments = departments, student = uid)
rule(position [ {student}; crsTaken ] cs601; type [ {transcript}; acts={read}; departments = departments, student = uid)

===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read}; ])
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; {read}; ])
rule(position [ {eeChair}; student = student, departments [ {ee}, type [ {transcript}; {read}; ])
rule(uid ] csStu2; type [ {gradebook}, crs [ {cs602}; {readScore, addScore}; ])
rule(position [ {csFac1}; crs [ {cs101}, type [ {gradebook}; {addScore, changeScore, assignGrade, readScore}; ])
rule(position [ {csFac2}; crs [ {cs601}, type [ {gradebook}; {addScore, changeScore, assignGrade, readScore}; ])
rule(position [ {eeFac1}; crs [ {ee101}, type [ {gradebook}; {addScore, changeScore, assignGrade, readScore}; ])
rule(position [ {eeFac2}; crs [ {ee601}, type [ {gradebook}; {addScore, changeScore, assignGrade, readScore}; ])
rule(position [ {admissions}; type [ {application}; {setStatus, read}; ])
rule(position [ {staff}, department [ {registrar}; type [ {roster}; {write, read}; ])
rule(position [ {faculty}; crs ] crs, type [ {roster}; {read}; crs = crs)
rule(position [ {student}; student = student, type [ {transcript}; {read}; ])
rule(position [ {student}; student = student, type [ {application}; {checkStatus}; ])
rule(position [ {applicant}; student = student, type [ {application}; {checkStatus}; ])
rule(crsTaken ] cs601; type [ {gradebook}, crs [ {cs601}; {readMyScores, addScore}; ])
rule(crsTaken ] ee601; type [ {gradebook}, crs [ {ee601}; {readMyScores, addScore}; ])
rule(crsTaken ] cs602; type [ {gradebook}, crs [ {cs602}; {readMyScores, addScore}; ])
rule(crsTaken ] ee602; type [ {gradebook}, crs [ {ee602}; {readMyScores, addScore}; ])
rule(crsTaken ] ee101; type [ {gradebook}, crs [ {ee101}; {readMyScores, readScore, addScore}; ])
rule(crsTaken ] cs101; type [ {gradebook}, crs [ {cs101}; {readMyScores, addScore, readScore}; ])
