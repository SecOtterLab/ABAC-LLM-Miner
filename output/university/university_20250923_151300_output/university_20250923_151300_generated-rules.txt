
===============================================================
ITERATION : 1
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read}; ])
rule(position [ {csStu2}; rid = csStu2trans; {read}; ])
rule(position [ {faculty}, isChair [ {True}; student = student, departments ] departments, type [ {transcript}; {read}; ])
rule(position [ {student}; rid = rid; {read}; ])
rule(position [ {staff}, department [ {registrar}; crs = crs, departments ] departments, type [ {roster}; {write, read}; ])
rule(position [ {student}; student = uid, type [ {application}; {checkStatus}; ])
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {setStatus, read}; ])
rule(position [ {faculty}; crs ] crs, departments ] departments, type [ {roster}; {read}; ])
rule(position [ {student}; crs ] crs, departments ] departments, type [ {gradebook}; {addScore}; ])
rule(position [ {faculty}; crs ] crs, departments ] departments, type [ {gradebook}; {addScore, changeScore, assignGrade, readScore}; ])
rule(position [ {student}; department = department, crs ] crs, departments ] departments, type [ {gradebook}; {readMyScores, readScore}; ])
rule(position [ {applicant}; type [ {application}; {checkStatus}; ])
rule(position [ {student}; rid = csStu2application; {checkStatus}; ])

===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}, departments ] departments; {read};)
rule(position [ {csStu2}; crs ] crs, type [ {gradebook}]; {readScore, addScore};)
rule(isChair [ {True}; student = student, type [ {transcript}]; {read};)
rule(position [ {student}; student = student, type [ {transcript}]; {read};)
rule(position [ {csStu4}; type [ {transcript}]; {read};)
rule(position [ {staff}, department [ {registrar}; crs = crs, type [ {roster}]; {write};)
rule(position [ {faculty}, department [ {cs}; crs = crs, type [ {roster}]; {read};)
rule(position [ {faculty}, department [ {cs}; crs = crs, type [ {gradebook}]; {addScore, changeScore, assignGrade};)
rule(position [ {staff}, department [ {registrar}; crs = crs, type [ {roster}]; {read};)
rule(position [ {student}; type [ {application}, student = student]; {checkStatus};)
rule(position [ {student}; crs ] crs, type [ {gradebook}]; {readMyScores};)
rule(position [ {faculty}, department [ {ee}; crs = crs, type [ {gradebook}]; {readScore, addScore, changeScore, assignGrade};)
rule(position [ {faculty}, department [ {ee}; crs = crs, type [ {roster}]; {read};)
rule(position [ {applicant}; type [ {application}, student = student]; {checkStatus};)
rule(position [ {staff}, department [ {admissions}; type [ {application}, student = student]; {setStatus, read};)
rule(position [ {student}; student = student, type [ {application}]; {checkStatus};)
