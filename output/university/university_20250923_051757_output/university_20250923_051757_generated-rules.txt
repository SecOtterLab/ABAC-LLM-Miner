
===============================================================
ITERATION : 4
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}, departments ] departments; {read};)
rule(position [ {csChair}; student = student, department [ {cs}, type [ {transcript}, departments ] departments; {read};)
rule(position [ {eeChair}; student = student, department [ {ee}, type [ {transcript}, departments ] departments; {read};)
rule(position [ {student}, uid = student; uid = student, type [ {transcript}, departments ] departments; {read};)
rule(position [ {csStu2}; type [ {gradebook}, crs [ {cs602}, departments ] {cs}; {readScore, addScore};)
rule(position [ {faculty}, department [ {ee}; type [ {gradebook}, crs [ {ee101}, departments ] {ee}; {readScore, assignGrade, addScore, changeScore};)
rule(position [ {faculty}, department [ {cs}; type [ {roster}, crs [ {cs101}, departments ] {cs}; {read, addScore, assignGrade, changeScore};)
rule(position [ {faculty}, department [ {ee}; type [ {roster}, crs [ {ee601}, departments ] {ee}; {read};)
rule(position [ {student}, crsTaught ] crs; departments ] departments, crs = crs, type [ {gradebook}; {readScore, addScore};)
rule(position [ {student}, crsTaken ] crs; departments ] departments, crs = crs, type [ {gradebook}; {readMyScores};)
rule(position [ {staff}, department [ {registrar}; crs = crs, type [ {roster}, departments ] departments; {write, read};)
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {read, setStatus};)
rule(position [ {student}, type [ {application}; student = uid; {checkStatus};)

===============================================================
ITERATION : 3
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read}; ])
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; {read}; ])
rule(position [ {admissions}; student = student, type [ {application}; {read, setStatus}; ])
rule(position [ {faculty}, department [ {ee}; crsTaught ] crs, type [ {gradebook}; {readScore, addScore, assignGrade, changeScore}; crs = crs ])
rule(position [ {faculty}, department [ {cs}; crsTaught ] crs, type [ {gradebook}; {readScore, addScore, assignGrade, changeScore}; crs = crs ])
rule(position [ {student}, department [ {cs}; crsTaken ] crs, type [ {gradebook}; {readMyScores}; crs = crs ])
rule(position [ {student}, department [ {ee}; crsTaken ] crs, type [ {gradebook}; {readMyScores}; crs = crs ])
rule(position [ {faculty}, department [ {ee}; type [ {roster}; {read}; crsTaught ] crs)
rule(position [ {faculty}, department [ {cs}; type [ {roster}; {read}; crsTaught ] crs)
rule(position [ {student}; student = student, type [ {application}; {checkStatus}; ])
rule(position [ {applicant}; student = student, type [ {application}; {checkStatus}; ])
rule(position [ {student}, department [ {cs}; crsTaught ] crs, type [ {gradebook}; {readScore, addScore}; crs = crs ])
rule(position [ {staff}, department [ {registrar}; departments ] departments, type [ {roster}; {write}; ])
rule(position [ {staff}, department [ {registrar}; departments ] departments, type [ {roster}; {read}; ])
rule(position [ {staff}, department [ {registrar}; departments ] departments, type [ {gradebook}; {readScore}; ])
rule(position [ {staff}, department [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read}; ])
rule(position [ {faculty}, isChair [ {True}; student = student, departments ] departments, type [ {transcript}; {read}; ])

===============================================================
ITERATION : 2
===============================================================
rule(position [ {registrar}; student = student, type [ {transcript}, departments ] departments; {read};)
rule(position [ {csChair}; student = student, type [ {transcript}, departments ] {cs}; {read};)
rule(position [ {admissions}; type [ {application}; {setStatus, read};)
rule(position [ {faculty}, department ] departments; type [ {gradebook}; {readScore, addScore, changeScore, assignGrade};)
rule(position [ {faculty}, department ] departments; type [ {roster}; {read, write};)
rule(position [ {student}, department ] departments; type [ {transcript}, student = uid; {read};)
rule(position [ {student}, crsTaken ] crs; type [ {gradebook}; {readMyScores};)
rule(position [ {student}; type [ {application}, student = uid; {checkStatus};)
rule(position [ {applicant}; type [ {application}, student = uid; {checkStatus};)
rule(position [ {student}, crsTaught ] crs; type [ {gradebook}; {readScore, addScore};)

===============================================================
ITERATION : 1
===============================================================
rule(position [ {registrar}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {csChair}; type [ {transcript}; acts={read}; departments = departments)
rule(position [ {admissions}; type [ {application}; acts={setStatus}; )
rule(position [ {eeFac1}; crsTaught ] ee101; crs = ee101, type [ {gradebook}; acts={readScore, addScore, assignGrade, changeScore}; )
rule(position [ {registrar}; type [ {roster}; acts={write}; )
rule(position [ {csStu2}; type [ {gradebook}; acts={readScore, addScore}; crs = cs602; )
rule(position [ {csStu3}; type [ {gradebook}; acts={readScore, addScore}; crs = cs601; )
rule(position [ {eeFac2}; crsTaught ] ee601; crs = ee601, type [ {gradebook}; acts={readScore, addScore, assignGrade, changeScore}; )
rule(position [ {admissions}; type [ {application}; acts={read}; )
rule(position [ {csChair}; type [ {transcript}; acts={read}; )
rule(position [ {registrar}; type [ {roster}; acts={read}; )
rule(position [ {registrar}; type [ {gradebook}; acts={write}; )
rule(position [ {csFac1}; crsTaught ] cs101; crs = cs101, type [ {gradebook}; acts={addScore, assignGrade, changeScore, readScore}; )
rule(position [ {csFac1}; crsTaught ] cs101; crs = cs101, type [ {roster}; acts={read}; )
rule(position [ {csFac2}; crsTaught ] cs601; crs = cs601, type [ {roster}; acts={read}; )
rule(position [ {csFac2}; crsTaught ] cs601; crs = cs601, type [ {gradebook}; acts={readScore, addScore, assignGrade, changeScore}; )
rule(position [ {applicant}; type [ {application}; acts={checkStatus}; student = student)
rule(position [ {student}; type [ {application}; acts={checkStatus}; uid = student)
rule(position [ {student}; type [ {gradebook}; acts={readMyScores}; uid = student, departments = departments, crsTaken ] crs; )
rule(position [ {student}; type [ {transcript}; acts={read}; uid = student)

===============================================================
ITERATION : 0
===============================================================
rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read}; )
rule(position [ {csChair}; student = student, departments [ {cs}, type [ {transcript}; {read}; )
rule(position [ {admissions}; student = student, type [ {application}; {setStatus}; )
rule(position [ {admissions}; student = student, type [ {application}; {read}; )
rule(position [ {faculty}, department [ {ee}; crsTaught ] crs, type [ {gradebook}, crs = crs; {readScore, assignGrade, addScore, changeScore}; )
rule(position [ {faculty}, department [ {cs}; crsTaught ] crs, type [ {gradebook}, crs = crs; {readScore, assignGrade, addScore, changeScore}; )
rule(position [ {faculty}, department [ {ee}; crsTaught ] crs, type [ {roster}, crs = crs; {read}; )
rule(position [ {faculty}, department [ {cs}; crsTaught ] crs, type [ {roster}, crs = crs; {read}; )
rule(position [ {student}; uid = student, type [ {application}; {checkStatus}; )
rule(position [ {student}, department [ {cs}; crsTaken ] crs, type [ {gradebook}, crs = crs; {readMyScores, readScore, addScore}; )
rule(position [ {student}, department [ {ee}; crsTaken ] crs, type [ {gradebook}, crs = crs; {readMyScores, readScore, addScore}; )
rule(position [ {staff}, department [ {registrar}; departments ] departments, type [ {roster}; {write, read}; )
rule(position [ {applicant}; type [ {application}; {checkStatus}; )
rule(position [ {student}; uid = student, departments ] departments, type [ {transcript}; {read}; )
